{"ast":null,"code":"\n\n'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _get = require(\"@babel/runtime/helpers/get\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar AnimatedNode = require(\"./AnimatedNode\");\nvar AnimatedWithChildren = require(\"./AnimatedWithChildren\");\nvar NativeAnimatedHelper = require(\"../NativeAnimatedHelper\");\nvar invariant = require('invariant');\nvar normalizeColor = require(\"../../StyleSheet/normalizeColor\");\nvar linear = function linear(t) {\n  return t;\n};\n\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n  var outputRange = config.outputRange;\n  checkInfiniteRange('outputRange', outputRange);\n  var inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n  invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n  var extrapolateRight = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n  return function (input) {\n    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input;\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n    }\n  }\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n    }\n  }\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  result = easing(result);\n\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n  return result;\n}\nfunction colorToRgba(input) {\n  var normalizedColor = normalizeColor(input);\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n  normalizedColor = normalizedColor || 0;\n  var r = (normalizedColor & 0xff000000) >>> 24;\n  var g = (normalizedColor & 0x00ff0000) >>> 16;\n  var b = (normalizedColor & 0x0000ff00) >>> 8;\n  var a = (normalizedColor & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\nvar stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex)\n  .map(function (value, i) {\n    return createInterpolation(_objectSpread(_objectSpread({}, config), {}, {\n      outputRange: outputRanges[i]\n    }));\n  });\n\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return function (input) {\n    var i = 0;\n    return outputRange[0].replace(stringShapeRegex, function () {\n      var val = +interpolations[i++](input);\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n      return String(val);\n    });\n  };\n}\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\nfunction findRange(input, inputRange) {\n  var i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1],\n    'inputRange must be monotonically non-decreasing ' + arr);\n  }\n}\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n  name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\nvar AnimatedInterpolation = function (_AnimatedWithChildren) {\n  _inherits(AnimatedInterpolation, _AnimatedWithChildren);\n  var _super = _createSuper(AnimatedInterpolation);\n\n  function AnimatedInterpolation(parent, config) {\n    var _this;\n    _classCallCheck(this, AnimatedInterpolation);\n    _this = _super.call(this);\n    _this._parent = parent;\n    _this._config = config;\n    _this._interpolation = createInterpolation(config);\n    return _this;\n  }\n  _createClass(AnimatedInterpolation, [{\n    key: \"__makeNative\",\n    value: function __makeNative(platformConfig) {\n      this._parent.__makeNative(platformConfig);\n      _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__makeNative\", this).call(this, platformConfig);\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      var parentValue = this._parent.__getValue();\n      invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n      return this._interpolation(parentValue);\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(config) {\n      return new AnimatedInterpolation(this, config);\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      this._parent.__addChild(this);\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      this._parent.__removeChild(this);\n      _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__transformDataType\",\n    value: function __transformDataType(range) {\n      return range.map(NativeAnimatedHelper.transformDataType);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      if (__DEV__) {\n        NativeAnimatedHelper.validateInterpolation(this._config);\n      }\n      return {\n        inputRange: this._config.inputRange,\n        outputRange: this.__transformDataType(this._config.outputRange),\n        extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n        extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n        type: 'interpolation'\n      };\n    }\n  }]);\n  return AnimatedInterpolation;\n}(AnimatedWithChildren);\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nmodule.exports = AnimatedInterpolation;","map":{"version":3,"names":["AnimatedNode","require","AnimatedWithChildren","NativeAnimatedHelper","invariant","normalizeColor","linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","checkInfiniteRange","inputRange","checkValidInputRange","length","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","result","Infinity","colorToRgba","normalizedColor","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","forEach","value","number","i","push","interpolations","shouldRound","isRgbOrRgba","replace","val","Math","round","String","startsWith","arr","pattern","name","AnimatedInterpolation","parent","_parent","_config","_interpolation","platformConfig","__makeNative","parentValue","__getValue","__addChild","__removeChild","transformDataType","__DEV__","validateInterpolation","__transformDataType","type","__createInterpolation","module","exports"],"sources":["D:/React/TaxiApp/cabApp/node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n/* eslint no-bitwise: 0 */\n\n'use strict';\n\nconst AnimatedNode = require('./AnimatedNode');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nconst invariant = require('invariant');\nconst normalizeColor = require('../../StyleSheet/normalizeColor');\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType = {\n  inputRange: $ReadOnlyArray<number>,\n  outputRange: $ReadOnlyArray<number> | $ReadOnlyArray<string>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n};\n\nconst linear = (t: number) => t;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createInterpolation(\n  config: InterpolationConfigType,\n): (input: number) => number | string {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  const outputRange: Array<number> = (config.outputRange: any);\n  checkInfiniteRange('outputRange', outputRange);\n\n  const inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange (' +\n      inputRange.length +\n      ') and outputRange (' +\n      outputRange.length +\n      ') must have the same length',\n  );\n\n  const easing = config.easing || linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    );\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input: string): string {\n  let normalizedColor = normalizeColor(input);\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n\n  const r = (normalizedColor & 0xff000000) >>> 24;\n  const g = (normalizedColor & 0x00ff0000) >>> 16;\n  const b = (normalizedColor & 0x0000ff00) >>> 8;\n  const a = (normalizedColor & 0x000000ff) / 255;\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(\n  config: InterpolationConfigType,\n): (input: number) => string {\n  let outputRange: Array<string> = (config.outputRange: any);\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n   * return `null`. Need to guard against this possibility. */\n  const outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `value.match()` can return\n     * `null`. Need to guard against this possibility. */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n\n  const interpolations = outputRange[0]\n    .match(stringShapeRegex)\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n     * return `null`. Need to guard against this possibility. */\n    /* $FlowFixMe[incompatible-call] (>=0.18.0): `outputRange[0].match()` can\n     * return `null`. Need to guard against this possibility. */\n    .map((value, i) => {\n      return createInterpolation({\n        ...config,\n        outputRange: outputRanges[i],\n      });\n    });\n\n  // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n  const shouldRound = isRgbOrRgba(outputRange[0]);\n\n  return input => {\n    let i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, () => {\n      let val = +interpolations[i++](input);\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range: string) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr: $ReadOnlyArray<string>) {\n  const pattern = arr[0].replace(stringShapeRegex, '');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      pattern === arr[i].replace(stringShapeRegex, ''),\n      'invalid pattern ' + arr[0] + ' and ' + arr[i],\n    );\n  }\n}\n\nfunction findRange(input: number, inputRange: $ReadOnlyArray<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      arr[i] >= arr[i - 1],\n      /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression\n       * below this comment, one or both of the operands may be something that\n       * doesn't cleanly convert to a string, like undefined, null, and object,\n       * etc. If you really mean this implicit string conversion, you can do\n       * something like String(myThing) */\n      'inputRange must be monotonically non-decreasing ' + arr,\n    );\n  }\n}\n\nfunction checkInfiniteRange(name: string, arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression\n     * below this comment, one or both of the operands may be something that\n     * doesn't cleanly convert to a string, like undefined, null, and object,\n     * etc. If you really mean this implicit string conversion, you can do\n     * something like String(myThing) */\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nclass AnimatedInterpolation extends AnimatedWithChildren {\n  // Export for testing.\n  static __createInterpolation: (\n    config: InterpolationConfigType,\n  ) => (input: number) => number | string = createInterpolation;\n\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType;\n  _interpolation: (input: number) => number | string;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative(platformConfig: ?PlatformConfig) {\n    this._parent.__makeNative(platformConfig);\n    super.__makeNative(platformConfig);\n  }\n\n  __getValue(): number | string {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._interpolation(parentValue);\n  }\n\n  interpolate(config: InterpolationConfigType): AnimatedInterpolation {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __transformDataType(range: Array<any>): Array<any> {\n    return range.map(NativeAnimatedHelper.transformDataType);\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      /* $FlowFixMe[incompatible-call] (>=0.38.0) - Flow error detected during\n       * the deployment of v0.38.0. To see the error, remove this comment and\n       * run flow */\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n\nmodule.exports = AnimatedInterpolation;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
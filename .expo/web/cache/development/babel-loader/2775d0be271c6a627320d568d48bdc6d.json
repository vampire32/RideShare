{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport ReactNativeViewAttributes from \"../Components/View/ReactNativeViewAttributes\";\nimport UIManager from \"../ReactNative/UIManager\";\nimport createReactNativeComponentClass from \"../Renderer/shims/createReactNativeComponentClass\";\nexport var NativeText = createReactNativeComponentClass('RCTText', function () {\n  return {\n    validAttributes: _objectSpread(_objectSpread({}, ReactNativeViewAttributes.UIView), {}, {\n      isHighlighted: true,\n      isPressable: true,\n      numberOfLines: true,\n      ellipsizeMode: true,\n      allowFontScaling: true,\n      maxFontSizeMultiplier: true,\n      disabled: true,\n      selectable: true,\n      selectionColor: true,\n      adjustsFontSizeToFit: true,\n      minimumFontScale: true,\n      textBreakStrategy: true,\n      onTextLayout: true,\n      onInlineViewLayout: true,\n      dataDetectorType: true,\n      android_hyphenationFrequency: true\n    }),\n    directEventTypes: {\n      topTextLayout: {\n        registrationName: 'onTextLayout'\n      },\n      topInlineViewLayout: {\n        registrationName: 'onInlineViewLayout'\n      }\n    },\n    uiViewClassName: 'RCTText'\n  };\n});\nexport var NativeVirtualText = !global.RN$Bridgeless && !UIManager.hasViewManagerConfig('RCTVirtualText') ? NativeText : createReactNativeComponentClass('RCTVirtualText', function () {\n  return {\n    validAttributes: _objectSpread(_objectSpread({}, ReactNativeViewAttributes.UIView), {}, {\n      isHighlighted: true,\n      isPressable: true,\n      maxFontSizeMultiplier: true\n    }),\n    uiViewClassName: 'RCTVirtualText'\n  };\n});","map":{"version":3,"names":["ReactNativeViewAttributes","UIManager","createReactNativeComponentClass","NativeText","validAttributes","UIView","isHighlighted","isPressable","numberOfLines","ellipsizeMode","allowFontScaling","maxFontSizeMultiplier","disabled","selectable","selectionColor","adjustsFontSizeToFit","minimumFontScale","textBreakStrategy","onTextLayout","onInlineViewLayout","dataDetectorType","android_hyphenationFrequency","directEventTypes","topTextLayout","registrationName","topInlineViewLayout","uiViewClassName","NativeVirtualText","global","RN$Bridgeless","hasViewManagerConfig"],"sources":["D:/React/TaxiApp/cabApp/node_modules/react-native/Libraries/Text/TextNativeComponent.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport ReactNativeViewAttributes from '../Components/View/ReactNativeViewAttributes';\nimport UIManager from '../ReactNative/UIManager';\nimport {type HostComponent} from '../Renderer/shims/ReactNativeTypes';\nimport createReactNativeComponentClass from '../Renderer/shims/createReactNativeComponentClass';\nimport {type ProcessedColorValue} from '../StyleSheet/processColor';\nimport {type TextProps} from './TextProps';\n\ntype NativeTextProps = $ReadOnly<{\n  ...TextProps,\n  isHighlighted?: ?boolean,\n  selectionColor?: ?ProcessedColorValue,\n  // This is only needed for platforms that optimize text hit testing, e.g.,\n  // react-native-windows. It can be used to only hit test virtual text spans\n  // that have pressable events attached to them.\n  isPressable?: ?boolean,\n}>;\n\nexport const NativeText: HostComponent<NativeTextProps> =\n  (createReactNativeComponentClass('RCTText', () => ({\n    validAttributes: {\n      ...ReactNativeViewAttributes.UIView,\n      isHighlighted: true,\n      isPressable: true,\n      numberOfLines: true,\n      ellipsizeMode: true,\n      allowFontScaling: true,\n      maxFontSizeMultiplier: true,\n      disabled: true,\n      selectable: true,\n      selectionColor: true,\n      adjustsFontSizeToFit: true,\n      minimumFontScale: true,\n      textBreakStrategy: true,\n      onTextLayout: true,\n      onInlineViewLayout: true,\n      dataDetectorType: true,\n      android_hyphenationFrequency: true,\n    },\n    directEventTypes: {\n      topTextLayout: {\n        registrationName: 'onTextLayout',\n      },\n      topInlineViewLayout: {\n        registrationName: 'onInlineViewLayout',\n      },\n    },\n    uiViewClassName: 'RCTText',\n  })): any);\n\nexport const NativeVirtualText: HostComponent<NativeTextProps> =\n  !global.RN$Bridgeless && !UIManager.hasViewManagerConfig('RCTVirtualText')\n    ? NativeText\n    : (createReactNativeComponentClass('RCTVirtualText', () => ({\n        validAttributes: {\n          ...ReactNativeViewAttributes.UIView,\n          isHighlighted: true,\n          isPressable: true,\n          maxFontSizeMultiplier: true,\n        },\n        uiViewClassName: 'RCTVirtualText',\n      })): any);\n"],"mappings":";;;;AAUA,OAAOA,yBAAyB;AAChC,OAAOC,SAAS;AAEhB,OAAOC,+BAA+B;AActC,OAAO,IAAMC,UAA0C,GACpDD,+BAA+B,CAAC,SAAS,EAAE;EAAA,OAAO;IACjDE,eAAe,kCACVJ,yBAAyB,CAACK,MAAM;MACnCC,aAAa,EAAE,IAAI;MACnBC,WAAW,EAAE,IAAI;MACjBC,aAAa,EAAE,IAAI;MACnBC,aAAa,EAAE,IAAI;MACnBC,gBAAgB,EAAE,IAAI;MACtBC,qBAAqB,EAAE,IAAI;MAC3BC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE,IAAI;MAChBC,cAAc,EAAE,IAAI;MACpBC,oBAAoB,EAAE,IAAI;MAC1BC,gBAAgB,EAAE,IAAI;MACtBC,iBAAiB,EAAE,IAAI;MACvBC,YAAY,EAAE,IAAI;MAClBC,kBAAkB,EAAE,IAAI;MACxBC,gBAAgB,EAAE,IAAI;MACtBC,4BAA4B,EAAE;IAAI,EACnC;IACDC,gBAAgB,EAAE;MAChBC,aAAa,EAAE;QACbC,gBAAgB,EAAE;MACpB,CAAC;MACDC,mBAAmB,EAAE;QACnBD,gBAAgB,EAAE;MACpB;IACF,CAAC;IACDE,eAAe,EAAE;EACnB,CAAC;AAAA,CAAC,CAAO;AAEX,OAAO,IAAMC,iBAAiD,GAC5D,CAACC,MAAM,CAACC,aAAa,IAAI,CAAC5B,SAAS,CAAC6B,oBAAoB,CAAC,gBAAgB,CAAC,GACtE3B,UAAU,GACTD,+BAA+B,CAAC,gBAAgB,EAAE;EAAA,OAAO;IACxDE,eAAe,kCACVJ,yBAAyB,CAACK,MAAM;MACnCC,aAAa,EAAE,IAAI;MACnBC,WAAW,EAAE,IAAI;MACjBI,qBAAqB,EAAE;IAAI,EAC5B;IACDe,eAAe,EAAE;EACnB,CAAC;AAAA,CAAC,CAAO"},"metadata":{},"sourceType":"module"}
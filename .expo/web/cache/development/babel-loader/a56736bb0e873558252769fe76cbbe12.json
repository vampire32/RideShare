{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"navigation\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { getHeaderTitle, Header, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport { DrawerActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport DrawerStatusContext from \"../utils/DrawerStatusContext\";\nimport getDrawerStatusFromState from \"../utils/getDrawerStatusFromState\";\nimport DrawerContent from \"./DrawerContent\";\nimport DrawerToggleButton from \"./DrawerToggleButton\";\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport { MaybeScreen, MaybeScreenContainer } from \"./ScreenFallback\";\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n    width = _ref.width;\n\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\nfunction DrawerViewBase(_ref2) {\n  var _Reanimated$isConfigu;\n  var state = _ref2.state,\n    navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    defaultStatus = _ref2.defaultStatus,\n    _ref2$drawerContent = _ref2.drawerContent,\n    drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(DrawerContent, props);\n    } : _ref2$drawerContent,\n    _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n    detachInactiveScreens = _ref2$detachInactiveS === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _ref2$detachInactiveS,\n    _ref2$useLegacyImplem = _ref2.useLegacyImplementation,\n    useLegacyImplementation = _ref2$useLegacyImplem === void 0 ? !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated)) : _ref2$useLegacyImplem;\n  var Drawer = useLegacyImplementation ? require(\"./legacy/Drawer\").default : require(\"./modern/Drawer\").default;\n  var focusedRouteKey = state.routes[state.index].key;\n  var _descriptors$focusedR = descriptors[focusedRouteKey].options,\n    _descriptors$focusedR2 = _descriptors$focusedR.drawerHideStatusBarOnOpen,\n    drawerHideStatusBarOnOpen = _descriptors$focusedR2 === void 0 ? false : _descriptors$focusedR2,\n    _descriptors$focusedR3 = _descriptors$focusedR.drawerPosition,\n    drawerPosition = _descriptors$focusedR3 === void 0 ? I18nManager.isRTL ? 'right' : 'left' : _descriptors$focusedR3,\n    _descriptors$focusedR4 = _descriptors$focusedR.drawerStatusBarAnimation,\n    drawerStatusBarAnimation = _descriptors$focusedR4 === void 0 ? 'slide' : _descriptors$focusedR4,\n    drawerStyle = _descriptors$focusedR.drawerStyle,\n    _descriptors$focusedR5 = _descriptors$focusedR.drawerType,\n    drawerType = _descriptors$focusedR5 === void 0 ? Platform.select({\n      ios: 'slide',\n      default: 'front'\n    }) : _descriptors$focusedR5,\n    gestureHandlerProps = _descriptors$focusedR.gestureHandlerProps,\n    _descriptors$focusedR6 = _descriptors$focusedR.keyboardDismissMode,\n    keyboardDismissMode = _descriptors$focusedR6 === void 0 ? 'on-drag' : _descriptors$focusedR6,\n    _descriptors$focusedR7 = _descriptors$focusedR.overlayColor,\n    overlayColor = _descriptors$focusedR7 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR7,\n    _descriptors$focusedR8 = _descriptors$focusedR.swipeEdgeWidth,\n    swipeEdgeWidth = _descriptors$focusedR8 === void 0 ? 32 : _descriptors$focusedR8,\n    _descriptors$focusedR9 = _descriptors$focusedR.swipeEnabled,\n    swipeEnabled = _descriptors$focusedR9 === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _descriptors$focusedR9,\n    _descriptors$focusedR10 = _descriptors$focusedR.swipeMinDistance,\n    swipeMinDistance = _descriptors$focusedR10 === void 0 ? 60 : _descriptors$focusedR10;\n  var _React$useState = React.useState([focusedRouteKey]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n  var dimensions = useSafeAreaFrame();\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var drawerStatus = getDrawerStatusFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n    var handleHardwareBack = function handleHardwareBack() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n      return true;\n    };\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    var subscription = BackHandler.addEventListener('hardwareBackPress', handleHardwareBack);\n    if (Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n    return function () {\n      subscription.remove();\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n  var renderDrawerContent = function renderDrawerContent() {\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  var renderSceneContent = function renderSceneContent() {\n    return React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var _descriptor$options = descriptor.options,\n        _descriptor$options$l = _descriptor$options.lazy,\n        lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l,\n        unmountOnBlur = _descriptor$options.unmountOnBlur;\n      var isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n      var _descriptor$options2 = descriptor.options,\n        _descriptor$options2$ = _descriptor$options2.header,\n        header = _descriptor$options2$ === void 0 ? function (_ref3) {\n          var _options$headerLeft;\n          var layout = _ref3.layout,\n            options = _ref3.options;\n          return React.createElement(Header, _extends({}, options, {\n            layout: layout,\n            title: getHeaderTitle(options, route.name),\n            headerLeft: (_options$headerLeft = options.headerLeft) !== null && _options$headerLeft !== void 0 ? _options$headerLeft : function (props) {\n              return React.createElement(DrawerToggleButton, props);\n            }\n          }));\n        } : _descriptor$options2$,\n        sceneContainerStyle = _descriptor$options2.sceneContainerStyle;\n      return React.createElement(MaybeScreen, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens\n      }, React.createElement(Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: descriptor.options.headerShown,\n        headerTransparent: descriptor.options.headerTransparent,\n        headerStatusBarHeight: descriptor.options.headerStatusBarHeight,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n  return React.createElement(DrawerStatusContext.Provider, {\n    value: drawerStatus\n  }, React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\nexport default function DrawerView(_ref4) {\n  var navigation = _ref4.navigation,\n    rest = _objectWithoutProperties(_ref4, _excluded);\n  return React.createElement(SafeAreaProviderCompat, null, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","useTheme","React","Reanimated","useSafeAreaFrame","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","GestureHandlerRootView","MaybeScreen","MaybeScreenContainer","getDefaultDrawerWidth","_ref","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","View","DrawerViewBase","state","_ref2","navigation","descriptors","defaultStatus","drawerContent","props","detachInactiveScreens","useLegacyImplementation","isConfigured","_Reanimated$isConfigu","Drawer","require","default","focusedRouteKey","routes","index","key","options","drawerHideStatusBarOnOpen","drawerPosition","I18nManager","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","gestureHandlerProps","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","useState","loaded","setLoaded","includes","dimensions","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","handleEscape","e","subscription","BackHandler","addEventListener","body","remove","removeEventListener","renderDrawerContent","Provider","value","renderSceneContent","enabled","hasTwoStates","style","styles","content","map","route","descriptor","lazy","unmountOnBlur","header","layout","_ref3","title","name","headerLeft","sceneContainerStyle","StyleSheet","absoluteFill","zIndex","visible","focused","headerShown","headerTransparent","headerStatusBarHeight","render","open","onOpen","onClose","swipeVelocityThreshold","swipeDistanceThreshold","hideStatusBarOnOpen","statusBarAnimation","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","DrawerView","_ref4","rest","create","flex"],"sources":["DrawerView.tsx"],"sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  DrawerNavigationState,\n  DrawerStatus,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  BackHandler,\n  I18nManager,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n  DrawerProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  defaultStatus: DrawerStatus;\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  defaultStatus,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  // Reanimated 2 is not configured\n  // @ts-expect-error: the type definitions are incomplete\n  useLegacyImplementation = !Reanimated.isConfigured?.(),\n}: Props) {\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\n    ? require('./legacy/Drawer').default\n    : require('./modern/Drawer').default;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleHardwareBack\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [\n    defaultStatus,\n    drawerStatus,\n    drawerType,\n    handleDrawerClose,\n    handleDrawerOpen,\n    navigation,\n  ]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        hasTwoStates\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n            sceneContainerStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={descriptor.options.headerShown}\n                headerTransparent={descriptor.options.headerTransparent}\n                headerStatusBarHeight={descriptor.options.headerStatusBarHeight}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneContainerStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeVelocityThreshold={500}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <GestureHandlerWrapper style={styles.content}>\n        <DrawerViewBase navigation={navigation} {...rest} />\n      </GestureHandlerWrapper>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
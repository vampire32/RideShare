{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport EmitterSubscription from \"./EmitterSubscription\";\nimport EventSubscriptionVendor from \"./EventSubscriptionVendor\";\nimport emptyFunction from 'fbjs/lib/emptyFunction';\nimport invariant from 'fbjs/lib/invariant';\n\nvar EventEmitter = function () {\n  function EventEmitter(subscriber) {\n    _classCallCheck(this, EventEmitter);\n\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  EventEmitter.prototype.addListener = function addListener(eventType, listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  };\n\n  EventEmitter.prototype.once = function once(eventType, listener, context) {\n    var _this = this;\n\n    return this.addListener(eventType, function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.removeCurrentListener();\n\n      listener.apply(context, args);\n    });\n  };\n\n  EventEmitter.prototype.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  };\n\n  EventEmitter.prototype.removeCurrentListener = function removeCurrentListener() {\n    invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  };\n\n  EventEmitter.prototype.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  };\n\n  EventEmitter.prototype.listeners = function listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  };\n\n  EventEmitter.prototype.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        if (subscription) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n\n      this._currentSubscription = null;\n    }\n  };\n\n  EventEmitter.prototype.removeListener = function removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","EmitterSubscription","EventSubscriptionVendor","emptyFunction","invariant","EventEmitter","subscriber","_subscriber","prototype","addListener","eventType","listener","context","addSubscription","once","_this","_len","arguments","length","args","Array","_key","removeCurrentListener","apply","removeAllListeners","removeAllSubscriptions","_currentSubscription","removeSubscription","subscription","emitter","listeners","subscriptions","getSubscriptionsForType","filter","thatReturnsTrue","map","emit","i","l","slice","call","removeListener","remove"],"sources":["D:/React/TaxiApp/cabApp/node_modules/react-native-phone-number-input/node_modules/react-native-web/dist/vendor/react-native/emitter/EventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule EventEmitter\n * @noflow\n * @typecheck\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport EmitterSubscription from './EmitterSubscription';\nimport EventSubscriptionVendor from './EventSubscriptionVendor';\n\nimport emptyFunction from 'fbjs/lib/emptyFunction';\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\n\nvar EventEmitter = function () {\n\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  function EventEmitter(subscriber) {\n    _classCallCheck(this, EventEmitter);\n\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  EventEmitter.prototype.addListener = function addListener(eventType, listener, context) {\n\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  };\n\n  /**\n   * Similar to addListener, except that the listener is removed after it is\n   * invoked once.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke only once when the\n   *   specified event is emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  EventEmitter.prototype.once = function once(eventType, listener, context) {\n    var _this = this;\n\n    return this.addListener(eventType, function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.removeCurrentListener();\n      listener.apply(context, args);\n    });\n  };\n\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n\n\n  EventEmitter.prototype.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  };\n\n  /**\n   * Provides an API that can be called during an eventing cycle to remove the\n   * last listener that was invoked. This allows a developer to provide an event\n   * object that can remove the listener (or listener map) during the\n   * invocation.\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   *\n   * @example\n   *   var subscription = emitter.addListenerMap({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *       emitter.removeCurrentListener();\n   *     }\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   *   emitter.emit('someEvent', 'def'); // does not log anything\n   */\n\n\n  EventEmitter.prototype.removeCurrentListener = function removeCurrentListener() {\n    invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  };\n\n  /**\n   * Removes a specific subscription. Called by the `remove()` method of the\n   * subscription itself to ensure any necessary cleanup is performed.\n   */\n\n\n  EventEmitter.prototype.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n    this._subscriber.removeSubscription(subscription);\n  };\n\n  /**\n   * Returns an array of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {array}\n   */\n\n\n  EventEmitter.prototype.listeners = function listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  };\n\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n\n\n  EventEmitter.prototype.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        if (subscription) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n      this._currentSubscription = null;\n    }\n  };\n\n  /**\n   * Removes the given listener for event of specific type.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   *\n   * @example\n   *   emitter.removeListener('someEvent', function(message) {\n   *     console.log(message);\n   *   }); // removes the listener if already registered\n   *\n   */\n\n\n  EventEmitter.prototype.removeListener = function removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
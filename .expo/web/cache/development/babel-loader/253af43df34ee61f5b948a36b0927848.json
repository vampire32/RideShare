{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport Dimensions from \"../Dimensions\";\n\nvar PixelRatio = function () {\n  function PixelRatio() {\n    _classCallCheck(this, PixelRatio);\n  }\n\n  PixelRatio.get = function get() {\n    return Dimensions.get('window').scale;\n  };\n\n  PixelRatio.getFontScale = function getFontScale() {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  };\n\n  PixelRatio.getPixelSizeForLayoutSize = function getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  };\n\n  PixelRatio.roundToNearestPixel = function roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  };\n\n  return PixelRatio;\n}();\n\nexport default PixelRatio;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","Dimensions","PixelRatio","get","scale","getFontScale","fontScale","getPixelSizeForLayoutSize","layoutSize","Math","round","roundToNearestPixel","ratio"],"sources":["D:/React/TaxiApp/cabApp/node_modules/react-native-phone-number-input/node_modules/react-native-web/dist/exports/PixelRatio/index.js"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Copyright (c) 2015-present, Nicolas Gallagher.\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport Dimensions from '../Dimensions';\n\n/**\n * PixelRatio gives access to the device pixel density.\n */\n\nvar PixelRatio = function () {\n  function PixelRatio() {\n    _classCallCheck(this, PixelRatio);\n  }\n\n  /**\n   * Returns the device pixel density.\n   */\n  PixelRatio.get = function get() {\n    return Dimensions.get('window').scale;\n  };\n\n  /**\n   * No equivalent for Web\n   */\n\n\n  PixelRatio.getFontScale = function getFontScale() {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  };\n\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   * Guaranteed to return an integer number.\n   */\n\n\n  PixelRatio.getPixelSizeForLayoutSize = function getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  };\n\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n\n\n  PixelRatio.roundToNearestPixel = function roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  };\n\n  return PixelRatio;\n}();\n\nexport default PixelRatio;"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;IAAE,MAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;EAA2D;AAAE;;AAYzJ,OAAOC,UAAP;;AAMA,IAAIC,UAAU,GAAG,YAAY;EAC3B,SAASA,UAAT,GAAsB;IACpBL,eAAe,CAAC,IAAD,EAAOK,UAAP,CAAf;EACD;;EAKDA,UAAU,CAACC,GAAX,GAAiB,SAASA,GAAT,GAAe;IAC9B,OAAOF,UAAU,CAACE,GAAX,CAAe,QAAf,EAAyBC,KAAhC;EACD,CAFD;;EASAF,UAAU,CAACG,YAAX,GAA0B,SAASA,YAAT,GAAwB;IAChD,OAAOJ,UAAU,CAACE,GAAX,CAAe,QAAf,EAAyBG,SAAzB,IAAsCJ,UAAU,CAACC,GAAX,EAA7C;EACD,CAFD;;EAUAD,UAAU,CAACK,yBAAX,GAAuC,SAASA,yBAAT,CAAmCC,UAAnC,EAA+C;IACpF,OAAOC,IAAI,CAACC,KAAL,CAAWF,UAAU,GAAGN,UAAU,CAACC,GAAX,EAAxB,CAAP;EACD,CAFD;;EAYAD,UAAU,CAACS,mBAAX,GAAiC,SAASA,mBAAT,CAA6BH,UAA7B,EAAyC;IACxE,IAAII,KAAK,GAAGV,UAAU,CAACC,GAAX,EAAZ;IACA,OAAOM,IAAI,CAACC,KAAL,CAAWF,UAAU,GAAGI,KAAxB,IAAiCA,KAAxC;EACD,CAHD;;EAKA,OAAOV,UAAP;AACD,CA7CgB,EAAjB;;AA+CA,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}
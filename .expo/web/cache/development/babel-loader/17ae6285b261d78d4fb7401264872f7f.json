{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"stackPresentation\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\n\nimport AppContainer from 'react-native/Libraries/ReactNative/AppContainer';\nimport warnOnce from 'warn-once';\nimport { ScreenStack, ScreenContext } from 'react-native-screens';\nimport { StackActions, useTheme } from '@react-navigation/native';\nimport { useSafeAreaFrame, useSafeAreaInsets } from 'react-native-safe-area-context';\nimport HeaderConfig from \"./HeaderConfig\";\nimport SafeAreaProviderCompat from \"../utils/SafeAreaProviderCompat\";\nimport getDefaultHeaderHeight from \"../utils/getDefaultHeaderHeight\";\nimport HeaderHeightContext from \"../utils/HeaderHeightContext\";\nvar isAndroid = Platform.OS === 'android';\nvar Container = View;\nif (__DEV__) {\n  var DebugContainer = function DebugContainer(props) {\n    var stackPresentation = props.stackPresentation,\n      rest = _objectWithoutProperties(props, _excluded);\n    if (Platform.OS === 'ios' && stackPresentation !== 'push') {\n      return React.createElement(AppContainer, null, React.createElement(View, rest));\n    }\n    return React.createElement(View, rest);\n  };\n\n  Container = DebugContainer;\n}\nvar MaybeNestedStack = function MaybeNestedStack(_ref) {\n  var options = _ref.options,\n    route = _ref.route,\n    stackPresentation = _ref.stackPresentation,\n    children = _ref.children;\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var _options$headerShown = options.headerShown,\n    headerShown = _options$headerShown === void 0 ? true : _options$headerShown,\n    contentStyle = options.contentStyle;\n  var Screen = React.useContext(ScreenContext);\n  var isHeaderInModal = isAndroid ? false : stackPresentation !== 'push' && headerShown === true;\n  var headerShownPreviousRef = React.useRef(headerShown);\n  React.useEffect(function () {\n    warnOnce(!isAndroid && stackPresentation !== 'push' && headerShownPreviousRef.current !== headerShown, \"Dynamically changing 'headerShown' in modals will result in remounting the screen and losing all local state. See options for the screen '\" + route.name + \"'.\");\n    headerShownPreviousRef.current = headerShown;\n  }, [headerShown, stackPresentation, route.name]);\n  var content = React.createElement(Container, {\n    style: [styles.container, stackPresentation !== 'transparentModal' && stackPresentation !== 'containedTransparentModal' && {\n      backgroundColor: colors.background\n    }, contentStyle],\n\n    stackPresentation: stackPresentation\n  }, children);\n  var topInset = useSafeAreaInsets().top;\n  var dimensions = useSafeAreaFrame();\n  var headerHeight = getDefaultHeaderHeight(dimensions, topInset, stackPresentation);\n  if (isHeaderInModal) {\n    return React.createElement(ScreenStack, {\n      style: styles.container\n    }, React.createElement(Screen, {\n      enabled: true,\n      isNativeStack: true,\n      style: StyleSheet.absoluteFill\n    }, React.createElement(HeaderHeightContext.Provider, {\n      value: headerHeight\n    }, React.createElement(HeaderConfig, _extends({}, options, {\n      route: route\n    })), content)));\n  }\n  return content;\n};\nvar RouteView = function RouteView(_ref2) {\n  var descriptors = _ref2.descriptors,\n    route = _ref2.route,\n    index = _ref2.index,\n    navigation = _ref2.navigation,\n    stateKey = _ref2.stateKey;\n  var _descriptors$route$ke = descriptors[route.key],\n    options = _descriptors$route$ke.options,\n    renderScene = _descriptors$route$ke.render;\n  var gestureEnabled = options.gestureEnabled,\n    headerShown = options.headerShown,\n    homeIndicatorHidden = options.homeIndicatorHidden,\n    _options$nativeBackBu = options.nativeBackButtonDismissalEnabled,\n    nativeBackButtonDismissalEnabled = _options$nativeBackBu === void 0 ? false : _options$nativeBackBu,\n    navigationBarColor = options.navigationBarColor,\n    navigationBarHidden = options.navigationBarHidden,\n    _options$replaceAnima = options.replaceAnimation,\n    replaceAnimation = _options$replaceAnima === void 0 ? 'pop' : _options$replaceAnima,\n    screenOrientation = options.screenOrientation,\n    statusBarAnimation = options.statusBarAnimation,\n    statusBarColor = options.statusBarColor,\n    statusBarHidden = options.statusBarHidden,\n    statusBarStyle = options.statusBarStyle,\n    statusBarTranslucent = options.statusBarTranslucent,\n    _options$swipeDirecti = options.swipeDirection,\n    swipeDirection = _options$swipeDirecti === void 0 ? 'horizontal' : _options$swipeDirecti,\n    transitionDuration = options.transitionDuration;\n  var customAnimationOnSwipe = options.customAnimationOnSwipe,\n    fullScreenSwipeEnabled = options.fullScreenSwipeEnabled,\n    stackAnimation = options.stackAnimation,\n    _options$stackPresent = options.stackPresentation,\n    stackPresentation = _options$stackPresent === void 0 ? 'push' : _options$stackPresent;\n  if (swipeDirection === 'vertical') {\n    if (fullScreenSwipeEnabled === undefined) {\n      fullScreenSwipeEnabled = true;\n    }\n    if (customAnimationOnSwipe === undefined) {\n      customAnimationOnSwipe = true;\n    }\n    if (stackAnimation === undefined) {\n      stackAnimation = 'slide_from_bottom';\n    }\n  }\n  if (index === 0) {\n    stackPresentation = 'push';\n  }\n  var isHeaderInPush = isAndroid ? headerShown : stackPresentation === 'push' && headerShown !== false;\n  var dimensions = useSafeAreaFrame();\n  var topInset = useSafeAreaInsets().top;\n  var headerHeight = getDefaultHeaderHeight(dimensions, topInset, stackPresentation);\n  var parentHeaderHeight = React.useContext(HeaderHeightContext);\n  var Screen = React.useContext(ScreenContext);\n  return React.createElement(Screen, {\n    key: route.key,\n    enabled: true,\n    isNativeStack: true,\n    style: StyleSheet.absoluteFill,\n    customAnimationOnSwipe: customAnimationOnSwipe,\n    fullScreenSwipeEnabled: fullScreenSwipeEnabled,\n    homeIndicatorHidden: homeIndicatorHidden,\n    gestureEnabled: isAndroid ? false : gestureEnabled,\n    nativeBackButtonDismissalEnabled: nativeBackButtonDismissalEnabled,\n    navigationBarColor: navigationBarColor,\n    navigationBarHidden: navigationBarHidden,\n    replaceAnimation: replaceAnimation,\n    screenOrientation: screenOrientation,\n    stackAnimation: stackAnimation,\n    stackPresentation: stackPresentation,\n    statusBarAnimation: statusBarAnimation,\n    statusBarColor: statusBarColor,\n    statusBarHidden: statusBarHidden,\n    statusBarStyle: statusBarStyle,\n    statusBarTranslucent: statusBarTranslucent,\n    swipeDirection: swipeDirection,\n    transitionDuration: transitionDuration,\n    onHeaderBackButtonClicked: function onHeaderBackButtonClicked() {\n      navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n        source: route.key,\n        target: stateKey\n      }));\n    },\n    onWillAppear: function onWillAppear() {\n      navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing: false\n        },\n        target: route.key\n      });\n    },\n    onWillDisappear: function onWillDisappear() {\n      navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing: true\n        },\n        target: route.key\n      });\n    },\n    onAppear: function onAppear() {\n      navigation.emit({\n        type: 'appear',\n        target: route.key\n      });\n      navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing: false\n        },\n        target: route.key\n      });\n    },\n    onDisappear: function onDisappear() {\n      navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing: true\n        },\n        target: route.key\n      });\n    },\n    onDismissed: function onDismissed(e) {\n      navigation.emit({\n        type: 'dismiss',\n        target: route.key\n      });\n      var dismissCount = e.nativeEvent.dismissCount > 0 ? e.nativeEvent.dismissCount : 1;\n      navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop(dismissCount)), {}, {\n        source: route.key,\n        target: stateKey\n      }));\n    }\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: isHeaderInPush !== false ? headerHeight : parentHeaderHeight !== null && parentHeaderHeight !== void 0 ? parentHeaderHeight : 0\n  }, React.createElement(HeaderConfig, _extends({}, options, {\n    route: route,\n    headerShown: isHeaderInPush\n  })), React.createElement(MaybeNestedStack, {\n    options: options,\n    route: route,\n    stackPresentation: stackPresentation\n  }, renderScene())));\n};\nfunction NativeStackViewInner(_ref3) {\n  var state = _ref3.state,\n    navigation = _ref3.navigation,\n    descriptors = _ref3.descriptors;\n  var key = state.key,\n    routes = state.routes;\n  return React.createElement(ScreenStack, {\n    style: styles.container\n  }, routes.map(function (route, index) {\n    return React.createElement(RouteView, {\n      key: route.key,\n      descriptors: descriptors,\n      route: route,\n      index: index,\n      navigation: navigation,\n      stateKey: key\n    });\n  }));\n}\nexport default function NativeStackView(props) {\n  return React.createElement(SafeAreaProviderCompat, null, React.createElement(NativeStackViewInner, props));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","AppContainer","warnOnce","ScreenStack","ScreenContext","StackActions","useTheme","useSafeAreaFrame","useSafeAreaInsets","HeaderConfig","SafeAreaProviderCompat","getDefaultHeaderHeight","HeaderHeightContext","isAndroid","Platform","OS","Container","View","__DEV__","DebugContainer","props","stackPresentation","rest","MaybeNestedStack","options","route","children","colors","headerShown","contentStyle","Screen","useContext","isHeaderInModal","headerShownPreviousRef","useRef","useEffect","current","name","content","style","styles","container","backgroundColor","background","topInset","top","dimensions","headerHeight","enabled","isNativeStack","StyleSheet","absoluteFill","Provider","value","RouteView","descriptors","index","navigation","stateKey","key","renderScene","render","gestureEnabled","homeIndicatorHidden","nativeBackButtonDismissalEnabled","navigationBarColor","navigationBarHidden","replaceAnimation","screenOrientation","statusBarAnimation","statusBarColor","statusBarHidden","statusBarStyle","statusBarTranslucent","swipeDirection","transitionDuration","customAnimationOnSwipe","fullScreenSwipeEnabled","stackAnimation","undefined","isHeaderInPush","parentHeaderHeight","onHeaderBackButtonClicked","dispatch","pop","source","target","onWillAppear","emit","type","data","closing","onWillDisappear","onAppear","onDisappear","onDismissed","e","dismissCount","nativeEvent","NativeStackViewInner","state","routes","map","NativeStackView","create","flex"],"sources":["NativeStackView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View, ViewProps } from 'react-native';\n// @ts-ignore Getting private component\nimport AppContainer from 'react-native/Libraries/ReactNative/AppContainer';\nimport warnOnce from 'warn-once';\nimport {\n  ScreenStack,\n  StackPresentationTypes,\n  ScreenContext,\n} from 'react-native-screens';\nimport {\n  ParamListBase,\n  StackActions,\n  StackNavigationState,\n  useTheme,\n  Route,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/native';\nimport {\n  useSafeAreaFrame,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n\nimport {\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n  NativeStackNavigationOptions,\n} from '../types';\nimport HeaderConfig from './HeaderConfig';\nimport SafeAreaProviderCompat from '../utils/SafeAreaProviderCompat';\nimport getDefaultHeaderHeight from '../utils/getDefaultHeaderHeight';\nimport HeaderHeightContext from '../utils/HeaderHeightContext';\n\nconst isAndroid = Platform.OS === 'android';\n\nlet Container = View;\n\nif (__DEV__) {\n  const DebugContainer = (\n    props: ViewProps & { stackPresentation: StackPresentationTypes }\n  ) => {\n    const { stackPresentation, ...rest } = props;\n    if (Platform.OS === 'ios' && stackPresentation !== 'push') {\n      return (\n        <AppContainer>\n          <View {...rest} />\n        </AppContainer>\n      );\n    }\n    return <View {...rest} />;\n  };\n  // @ts-ignore Wrong props\n  Container = DebugContainer;\n}\n\nconst MaybeNestedStack = ({\n  options,\n  route,\n  stackPresentation,\n  children,\n}: {\n  options: NativeStackNavigationOptions;\n  route: Route<string>;\n  stackPresentation: StackPresentationTypes;\n  children: React.ReactNode;\n}) => {\n  const { colors } = useTheme();\n  const { headerShown = true, contentStyle } = options;\n\n  const Screen = React.useContext(ScreenContext);\n\n  const isHeaderInModal = isAndroid\n    ? false\n    : stackPresentation !== 'push' && headerShown === true;\n\n  const headerShownPreviousRef = React.useRef(headerShown);\n\n  React.useEffect(() => {\n    warnOnce(\n      !isAndroid &&\n        stackPresentation !== 'push' &&\n        headerShownPreviousRef.current !== headerShown,\n      `Dynamically changing 'headerShown' in modals will result in remounting the screen and losing all local state. See options for the screen '${route.name}'.`\n    );\n\n    headerShownPreviousRef.current = headerShown;\n  }, [headerShown, stackPresentation, route.name]);\n\n  const content = (\n    <Container\n      style={[\n        styles.container,\n        stackPresentation !== 'transparentModal' &&\n          stackPresentation !== 'containedTransparentModal' && {\n            backgroundColor: colors.background,\n          },\n        contentStyle,\n      ]}\n      // @ts-ignore Wrong props passed to View\n      stackPresentation={stackPresentation}>\n      {children}\n    </Container>\n  );\n\n  const topInset = useSafeAreaInsets().top;\n  const dimensions = useSafeAreaFrame();\n  const headerHeight = getDefaultHeaderHeight(\n    dimensions,\n    topInset,\n    stackPresentation\n  );\n\n  if (isHeaderInModal) {\n    return (\n      <ScreenStack style={styles.container}>\n        <Screen enabled isNativeStack style={StyleSheet.absoluteFill}>\n          <HeaderHeightContext.Provider value={headerHeight}>\n            <HeaderConfig {...options} route={route} />\n            {content}\n          </HeaderHeightContext.Provider>\n        </Screen>\n      </ScreenStack>\n    );\n  }\n\n  return content;\n};\n\ntype NavigationRoute<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList\n> = Route<Extract<RouteName, string>, ParamList[RouteName]> & {\n  state?: NavigationState | PartialState<NavigationState>;\n};\n\nconst RouteView = ({\n  descriptors,\n  route,\n  index,\n  navigation,\n  stateKey,\n}: {\n  descriptors: NativeStackDescriptorMap;\n  route: NavigationRoute<ParamListBase, string>;\n  index: number;\n  navigation: NativeStackNavigationHelpers;\n  stateKey: string;\n}) => {\n  const { options, render: renderScene } = descriptors[route.key];\n  const {\n    gestureEnabled,\n    headerShown,\n    homeIndicatorHidden,\n    nativeBackButtonDismissalEnabled = false,\n    navigationBarColor,\n    navigationBarHidden,\n    replaceAnimation = 'pop',\n    screenOrientation,\n    statusBarAnimation,\n    statusBarColor,\n    statusBarHidden,\n    statusBarStyle,\n    statusBarTranslucent,\n    swipeDirection = 'horizontal',\n    transitionDuration,\n  } = options;\n\n  let {\n    customAnimationOnSwipe,\n    fullScreenSwipeEnabled,\n    stackAnimation,\n    stackPresentation = 'push',\n  } = options;\n\n  if (swipeDirection === 'vertical') {\n    // for `vertical` direction to work, we need to set `fullScreenSwipeEnabled` to `true`\n    // so the screen can be dismissed from any point on screen.\n    // `customAnimationOnSwipe` needs to be set to `true` so the `stackAnimation` set by user can be used,\n    // otherwise `simple_push` will be used.\n    // Also, the default animation for this direction seems to be `slide_from_bottom`.\n    if (fullScreenSwipeEnabled === undefined) {\n      fullScreenSwipeEnabled = true;\n    }\n    if (customAnimationOnSwipe === undefined) {\n      customAnimationOnSwipe = true;\n    }\n    if (stackAnimation === undefined) {\n      stackAnimation = 'slide_from_bottom';\n    }\n  }\n\n  if (index === 0) {\n    // first screen should always be treated as `push`, it resolves problems with no header animation\n    // for navigator with first screen as `modal` and the next as `push`\n    stackPresentation = 'push';\n  }\n\n  const isHeaderInPush = isAndroid\n    ? headerShown\n    : stackPresentation === 'push' && headerShown !== false;\n\n  const dimensions = useSafeAreaFrame();\n  const topInset = useSafeAreaInsets().top;\n  const headerHeight = getDefaultHeaderHeight(\n    dimensions,\n    topInset,\n    stackPresentation\n  );\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n  const Screen = React.useContext(ScreenContext);\n\n  return (\n    <Screen\n      key={route.key}\n      enabled\n      isNativeStack\n      style={StyleSheet.absoluteFill}\n      customAnimationOnSwipe={customAnimationOnSwipe}\n      fullScreenSwipeEnabled={fullScreenSwipeEnabled}\n      homeIndicatorHidden={homeIndicatorHidden}\n      gestureEnabled={isAndroid ? false : gestureEnabled}\n      nativeBackButtonDismissalEnabled={nativeBackButtonDismissalEnabled}\n      navigationBarColor={navigationBarColor}\n      navigationBarHidden={navigationBarHidden}\n      replaceAnimation={replaceAnimation}\n      screenOrientation={screenOrientation}\n      stackAnimation={stackAnimation}\n      stackPresentation={stackPresentation}\n      statusBarAnimation={statusBarAnimation}\n      statusBarColor={statusBarColor}\n      statusBarHidden={statusBarHidden}\n      statusBarStyle={statusBarStyle}\n      statusBarTranslucent={statusBarTranslucent}\n      swipeDirection={swipeDirection}\n      transitionDuration={transitionDuration}\n      onHeaderBackButtonClicked={() => {\n        navigation.dispatch({\n          ...StackActions.pop(),\n          source: route.key,\n          target: stateKey,\n        });\n      }}\n      onWillAppear={() => {\n        navigation.emit({\n          type: 'transitionStart',\n          data: { closing: false },\n          target: route.key,\n        });\n      }}\n      onWillDisappear={() => {\n        navigation.emit({\n          type: 'transitionStart',\n          data: { closing: true },\n          target: route.key,\n        });\n      }}\n      onAppear={() => {\n        navigation.emit({\n          type: 'appear',\n          target: route.key,\n        });\n        navigation.emit({\n          type: 'transitionEnd',\n          data: { closing: false },\n          target: route.key,\n        });\n      }}\n      onDisappear={() => {\n        navigation.emit({\n          type: 'transitionEnd',\n          data: { closing: true },\n          target: route.key,\n        });\n      }}\n      onDismissed={(e) => {\n        navigation.emit({\n          type: 'dismiss',\n          target: route.key,\n        });\n\n        const dismissCount =\n          e.nativeEvent.dismissCount > 0 ? e.nativeEvent.dismissCount : 1;\n\n        navigation.dispatch({\n          ...StackActions.pop(dismissCount),\n          source: route.key,\n          target: stateKey,\n        });\n      }}>\n      <HeaderHeightContext.Provider\n        value={\n          isHeaderInPush !== false ? headerHeight : parentHeaderHeight ?? 0\n        }>\n        <HeaderConfig {...options} route={route} headerShown={isHeaderInPush} />\n        <MaybeNestedStack\n          options={options}\n          route={route}\n          stackPresentation={stackPresentation}>\n          {renderScene()}\n        </MaybeNestedStack>\n      </HeaderHeightContext.Provider>\n    </Screen>\n  );\n};\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nfunction NativeStackViewInner({\n  state,\n  navigation,\n  descriptors,\n}: Props): JSX.Element {\n  const { key, routes } = state;\n\n  return (\n    <ScreenStack style={styles.container}>\n      {routes.map((route, index) => (\n        <RouteView\n          key={route.key}\n          descriptors={descriptors}\n          route={route}\n          index={index}\n          navigation={navigation}\n          stateKey={key}\n        />\n      ))}\n    </ScreenStack>\n  );\n}\n\nexport default function NativeStackView(props: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <NativeStackViewInner {...props} />\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\n\nimport * as NativeComponentRegistry from \"../../NativeComponent/NativeComponentRegistry\";\nimport Platform from \"../../Utilities/Platform\";\nimport codegenNativeCommands from \"../../Utilities/codegenNativeCommands\";\nimport ReactNativeViewViewConfigAndroid from \"./ReactNativeViewViewConfigAndroid\";\nimport * as React from 'react';\nvar ViewNativeComponent = NativeComponentRegistry.get('RCTView', function () {\n  return Platform.OS === 'android' ? ReactNativeViewViewConfigAndroid : {\n    uiViewClassName: 'RCTView'\n  };\n});\nexport var Commands = codegenNativeCommands({\n  supportedCommands: ['hotspotUpdate', 'setPressed']\n});\nexport default ViewNativeComponent;","map":{"version":3,"names":["NativeComponentRegistry","Platform","codegenNativeCommands","ReactNativeViewViewConfigAndroid","React","ViewNativeComponent","get","OS","uiViewClassName","Commands","supportedCommands"],"sources":["D:/React/TaxiApp/cabApp/node_modules/react-native/Libraries/Components/View/ViewNativeComponent.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as NativeComponentRegistry from '../../NativeComponent/NativeComponentRegistry';\nimport {type HostComponent} from '../../Renderer/shims/ReactNativeTypes';\nimport Platform from '../../Utilities/Platform';\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\nimport ReactNativeViewViewConfigAndroid from './ReactNativeViewViewConfigAndroid';\nimport {type ViewProps as Props} from './ViewPropTypes';\nimport * as React from 'react';\n\nconst ViewNativeComponent: HostComponent<Props> =\n  NativeComponentRegistry.get<Props>('RCTView', () =>\n    Platform.OS === 'android'\n      ? ReactNativeViewViewConfigAndroid\n      : {uiViewClassName: 'RCTView'},\n  );\n\ninterface NativeCommands {\n  +hotspotUpdate: (\n    viewRef: React.ElementRef<HostComponent<mixed>>,\n    x: number,\n    y: number,\n  ) => void;\n  +setPressed: (\n    viewRef: React.ElementRef<HostComponent<mixed>>,\n    pressed: boolean,\n  ) => void;\n}\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: ['hotspotUpdate', 'setPressed'],\n});\n\nexport default ViewNativeComponent;\n\nexport type ViewNativeComponentType = HostComponent<Props>;\n"],"mappings":";;AAUA,OAAO,KAAKA,uBAAuB;AAEnC,OAAOC,QAAQ;AACf,OAAOC,qBAAqB;AAC5B,OAAOC,gCAAgC;AAEvC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,IAAMC,mBAAyC,GAC7CL,uBAAuB,CAACM,GAAG,CAAQ,SAAS,EAAE;EAAA,OAC5CL,QAAQ,CAACM,EAAE,KAAK,SAAS,GACrBJ,gCAAgC,GAChC;IAACK,eAAe,EAAE;EAAS,CAAC;AAAA,EACjC;AAcH,OAAO,IAAMC,QAAwB,GAAGP,qBAAqB,CAAiB;EAC5EQ,iBAAiB,EAAE,CAAC,eAAe,EAAE,YAAY;AACnD,CAAC,CAAC;AAEF,eAAeL,mBAAmB"},"metadata":{},"sourceType":"module"}
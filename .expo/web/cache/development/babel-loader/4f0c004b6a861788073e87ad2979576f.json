{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport invariant from 'fbjs/lib/invariant';\n\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  EventSubscriptionVendor.prototype.addSubscription = function addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  };\n\n  EventSubscriptionVendor.prototype.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  };\n\n  EventSubscriptionVendor.prototype.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  };\n\n  EventSubscriptionVendor.prototype.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nexport default EventSubscriptionVendor;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","invariant","EventSubscriptionVendor","_subscriptionsForType","_currentSubscription","prototype","addSubscription","eventType","subscription","subscriber","key","length","push","removeAllSubscriptions","undefined","removeSubscription","subscriptionsForType","getSubscriptionsForType"],"sources":["D:/React/TaxiApp/cabApp/node_modules/react-native-phone-number-input/node_modules/react-native-web/dist/vendor/react-native/emitter/EventSubscriptionVendor.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule EventSubscriptionVendor\n * \n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n\n  EventSubscriptionVendor.prototype.addSubscription = function addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    var key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  };\n\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n\n\n  EventSubscriptionVendor.prototype.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  };\n\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n\n\n  EventSubscriptionVendor.prototype.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  };\n\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n\n\n  EventSubscriptionVendor.prototype.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nexport default EventSubscriptionVendor;"],"mappings":"AASA;;AAEA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;IAAE,MAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;EAA2D;AAAE;;AAEzJ,OAAOC,SAAP,MAAsB,oBAAtB;;AAMA,IAAIC,uBAAuB,GAAG,YAAY;EACxC,SAASA,uBAAT,GAAmC;IACjCL,eAAe,CAAC,IAAD,EAAOK,uBAAP,CAAf;;IAEA,KAAKC,qBAAL,GAA6B,EAA7B;IACA,KAAKC,oBAAL,GAA4B,IAA5B;EACD;;EAUDF,uBAAuB,CAACG,SAAxB,CAAkCC,eAAlC,GAAoD,SAASA,eAAT,CAAyBC,SAAzB,EAAoCC,YAApC,EAAkD;IACpGP,SAAS,CAACO,YAAY,CAACC,UAAb,KAA4B,IAA7B,EAAmC,wDAAnC,CAAT;;IACA,IAAI,CAAC,KAAKN,qBAAL,CAA2BI,SAA3B,CAAL,EAA4C;MAC1C,KAAKJ,qBAAL,CAA2BI,SAA3B,IAAwC,EAAxC;IACD;;IACD,IAAIG,GAAG,GAAG,KAAKP,qBAAL,CAA2BI,SAA3B,EAAsCI,MAAhD;;IACA,KAAKR,qBAAL,CAA2BI,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C;;IACAA,YAAY,CAACD,SAAb,GAAyBA,SAAzB;IACAC,YAAY,CAACE,GAAb,GAAmBA,GAAnB;IACA,OAAOF,YAAP;EACD,CAVD;;EAoBAN,uBAAuB,CAACG,SAAxB,CAAkCQ,sBAAlC,GAA2D,SAASA,sBAAT,CAAgCN,SAAhC,EAA2C;IACpG,IAAIA,SAAS,KAAKO,SAAlB,EAA6B;MAC3B,KAAKX,qBAAL,GAA6B,EAA7B;IACD,CAFD,MAEO;MACL,OAAO,KAAKA,qBAAL,CAA2BI,SAA3B,CAAP;IACD;EACF,CAND;;EAgBAL,uBAAuB,CAACG,SAAxB,CAAkCU,kBAAlC,GAAuD,SAASA,kBAAT,CAA4BP,YAA5B,EAA0C;IAC/F,IAAID,SAAS,GAAGC,YAAY,CAACD,SAA7B;IACA,IAAIG,GAAG,GAAGF,YAAY,CAACE,GAAvB;IAEA,IAAIM,oBAAoB,GAAG,KAAKb,qBAAL,CAA2BI,SAA3B,CAA3B;;IACA,IAAIS,oBAAJ,EAA0B;MACxB,OAAOA,oBAAoB,CAACN,GAAD,CAA3B;IACD;EACF,CARD;;EAwBAR,uBAAuB,CAACG,SAAxB,CAAkCY,uBAAlC,GAA4D,SAASA,uBAAT,CAAiCV,SAAjC,EAA4C;IACtG,OAAO,KAAKJ,qBAAL,CAA2BI,SAA3B,CAAP;EACD,CAFD;;EAIA,OAAOL,uBAAP;AACD,CAjF6B,EAA9B;;AAmFA,eAAeA,uBAAf"},"metadata":{},"sourceType":"module"}
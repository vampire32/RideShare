{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"initialRouteName\", \"children\", \"screenOptions\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { createNavigatorFactory, StackActions, StackRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport NativeStackView from \"../views/NativeStackView\";\nfunction NativeStackNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n    children = _ref.children,\n    screenOptions = _ref.screenOptions,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useNavigationBuilder = useNavigationBuilder(StackRouter, {\n      initialRouteName: initialRouteName,\n      children: children,\n      screenOptions: screenOptions\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation;\n\n  React.useEffect(function () {\n    if ((navigation === null || navigation === void 0 ? void 0 : navigation.dangerouslyGetParent) === undefined) {\n      console.warn('Looks like you are importing `native-stack` from `react-native-screens/native-stack`. Since version 6 of `react-navigation`, it should be imported from `@react-navigation/native-stack`.');\n    }\n  }, [navigation]);\n  React.useEffect(function () {\n    var _navigation$addListen;\n    return navigation === null || navigation === void 0 ? void 0 : (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(NativeStackView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  }));\n}\nexport default createNavigatorFactory(NativeStackNavigator);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SACEA,sBADF,EAGEC,YAHF,EAMEC,WANF,EASEC,oBATF,QAUO,0BAVP;AAWA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAMA,OAAOC,eAAP;AAEA,SAASC,oBAAT,OAK8B;EAAA,IAJ5BC,gBAD4B,QAC5BA,gBAD4B;IAE5BC,QAF4B,QAE5BA,QAF4B;IAG5BC,aAH4B,QAG5BA,aAH4B;IAIzBC;EAEH,4BAA2CP,oBAAoB,CAM7DD,WAN6D,EAMhD;MACbK,gBADa,EACbA,gBADa;MAEbC,QAFa,EAEbA,QAFa;MAGbC;IAHa,CANgD,CAA/D;IAAQE,KAAF,yBAAEA,KAAF;IAASC,WAAT,yBAASA,WAAT;IAAsBC;;EAc5BT,KAAK,CAACU,SAAN,CAAgB,YAAM;IAEpB,IAAI,WAAU,SAAV,cAAU,WAAV,sBAAU,CAAEC,oBAAZ,MAAqCC,SAAzC,EAAoD;MAClDC,OAAO,CAACC,IAAR,CACE,2LADF;IAGD;EACF,CAPD,EAOG,CAACL,UAAD,CAPH;EASAT,KAAK,CAACU,SAAN,CACE;IAAA;IAAA,OACED,UADF,aACEA,UADF,gDACEA,UAAU,CAAEM,WADd,0DACEC,qCAAU,EAAgB,UAAhB,EAA6BC,WAAD,EAAO;MAC3C,IAAMC,SAAS,GAAGT,UAAU,CAACS,SAAX,EAAlB;;MAIAC,qBAAqB,CAAC,YAAM;QAC1B,IACEZ,KAAK,CAACa,KAAN,GAAc,CAAd,IACAF,SADA,IAEA,CAAED,CAAD,CAAkCI,gBAHrC,EAIE;UAGAZ,UAAU,CAACa,QAAX,iCACKzB,YAAY,CAAC0B,QAAb,EADe;YAElBC,MAAM,EAAEjB,KAAK,CAACkB;UAAAA,GAFhB;QAID;MACF,CAboB,CAArB;IAcD,CAnBS,CADZ;EAAA,CADF,EAsBE,CAAChB,UAAD,EAAaF,KAAK,CAACa,KAAnB,EAA0Bb,KAAK,CAACkB,GAAhC,CAtBF;EAyBA,OACEzB,oBAACC,eAAD,eACMK,IADN;IAEEC,KAAK,EAAEA,KAFT;IAGEE,UAAU,EAAEA,UAHd;IAIED,WAAW,EAAEA;EAJf,GADF;AAQD;AAED,eAAeZ,sBAAsB,CAKnCM,oBALmC,CAArC","names":["createNavigatorFactory","StackActions","StackRouter","useNavigationBuilder","React","NativeStackView","NativeStackNavigator","initialRouteName","children","screenOptions","rest","state","descriptors","navigation","useEffect","dangerouslyGetParent","undefined","console","warn","addListener","_navigation$addListen","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"sources":["createNativeStackNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  EventArg,\n  StackActions,\n  StackActionHelpers,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigatorProps,\n} from '../types';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: NativeStackNavigatorProps) {\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    NativeStackNavigationOptions,\n    NativeStackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions,\n  });\n\n  // Starting from React Navigation v6, `native-stack` should be imported from\n  // `@react-navigation/native-stack` rather than `react-native-screens/native-stack`\n  React.useEffect(() => {\n    // @ts-ignore navigation.dangerouslyGetParent was removed in v6\n    if (navigation?.dangerouslyGetParent === undefined) {\n      console.warn(\n        'Looks like you are importing `native-stack` from `react-native-screens/native-stack`. Since version 6 of `react-navigation`, it should be imported from `@react-navigation/native-stack`.'\n      );\n    }\n  }, [navigation]);\n\n  React.useEffect(\n    () =>\n      navigation?.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NativeStackView\n      {...rest}\n      state={state}\n      navigation={navigation}\n      descriptors={descriptors}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]},"metadata":{},"sourceType":"module"}
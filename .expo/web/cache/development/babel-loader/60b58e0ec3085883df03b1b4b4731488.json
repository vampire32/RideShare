{"ast":null,"code":"\n\n'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport invariant from 'invariant';\n\nexport function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {\n  var out = [];\n  var outLength = 0;\n  for (var ii = 0; ii < itemCount; ii++) {\n    var frame = getFrameMetrics(ii);\n    var trailingOffset = frame.offset + frame.length;\n    for (var kk = 0; kk < offsets.length; kk++) {\n      if (out[kk] == null && trailingOffset >= offsets[kk]) {\n        out[kk] = ii;\n        outLength++;\n        if (kk === offsets.length - 1) {\n          invariant(outLength === offsets.length, 'bad offsets input, should be in increasing order: %s', JSON.stringify(offsets));\n          return out;\n        }\n      }\n    }\n  }\n  return out;\n}\n\nexport function newRangeCount(prev, next) {\n  return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));\n}\n\nexport function computeWindowedRenderLimits(data, getItemCount, maxToRenderPerBatch, windowSize, prev, getFrameMetricsApprox, scrollMetrics) {\n  var itemCount = getItemCount(data);\n  if (itemCount === 0) {\n    return prev;\n  }\n  var offset = scrollMetrics.offset,\n    velocity = scrollMetrics.velocity,\n    visibleLength = scrollMetrics.visibleLength;\n\n  var visibleBegin = Math.max(0, offset);\n  var visibleEnd = visibleBegin + visibleLength;\n  var overscanLength = (windowSize - 1) * visibleLength;\n\n  var leadFactor = 0.5;\n\n  var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n  var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);\n  var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n  var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;\n  if (lastItemOffset < overscanBegin) {\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1\n    };\n  }\n\n  var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], itemCount, getFrameMetricsApprox),\n    _elementsThatOverlapO2 = _slicedToArray(_elementsThatOverlapO, 4),\n    overscanFirst = _elementsThatOverlapO2[0],\n    first = _elementsThatOverlapO2[1],\n    last = _elementsThatOverlapO2[2],\n    overscanLast = _elementsThatOverlapO2[3];\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;\n  var visible = {\n    first: first,\n    last: last\n  };\n\n  var newCellCount = newRangeCount(prev, visible);\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      break;\n    }\n    var maxNewCells = newCellCount >= maxToRenderPerBatch;\n    var firstWillAddMore = first <= prev.first || first > prev.last;\n    var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    var lastWillAddMore = last >= prev.last || last < prev.first;\n    var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      break;\n    }\n    if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n      first--;\n    }\n    if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n      last++;\n    }\n  }\n  if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {\n    throw new Error('Bad window calculation ' + JSON.stringify({\n      first: first,\n      last: last,\n      itemCount: itemCount,\n      overscanFirst: overscanFirst,\n      overscanLast: overscanLast,\n      visible: visible\n    }));\n  }\n  return {\n    first: first,\n    last: last\n  };\n}\nexport function keyExtractor(item, index) {\n  if (typeof item === 'object' && (item == null ? void 0 : item.key) != null) {\n    return item.key;\n  }\n  if (typeof item === 'object' && (item == null ? void 0 : item.id) != null) {\n    return item.id;\n  }\n  return String(index);\n}","map":{"version":3,"names":["invariant","elementsThatOverlapOffsets","offsets","itemCount","getFrameMetrics","out","outLength","ii","frame","trailingOffset","offset","length","kk","JSON","stringify","newRangeCount","prev","next","last","first","Math","max","min","computeWindowedRenderLimits","data","getItemCount","maxToRenderPerBatch","windowSize","getFrameMetricsApprox","scrollMetrics","velocity","visibleLength","visibleBegin","visibleEnd","overscanLength","leadFactor","fillPreference","overscanBegin","overscanEnd","lastItemOffset","overscanFirst","overscanLast","visible","newCellCount","maxNewCells","firstWillAddMore","firstShouldIncrement","lastWillAddMore","lastShouldIncrement","Error","keyExtractor","item","index","key","id","String"],"sources":["D:/React/TaxiApp/cabApp/node_modules/react-native/Libraries/Lists/VirtualizeUtils.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport invariant from 'invariant';\n\n/**\n * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n * items that bound different windows of content, such as the visible area or the buffered overscan\n * area.\n */\nexport function elementsThatOverlapOffsets(\n  offsets: Array<number>,\n  itemCount: number,\n  getFrameMetrics: (index: number) => {\n    length: number,\n    offset: number,\n    ...\n  },\n): Array<number> {\n  const out = [];\n  let outLength = 0;\n  for (let ii = 0; ii < itemCount; ii++) {\n    const frame = getFrameMetrics(ii);\n    const trailingOffset = frame.offset + frame.length;\n    for (let kk = 0; kk < offsets.length; kk++) {\n      if (out[kk] == null && trailingOffset >= offsets[kk]) {\n        out[kk] = ii;\n        outLength++;\n        if (kk === offsets.length - 1) {\n          invariant(\n            outLength === offsets.length,\n            'bad offsets input, should be in increasing order: %s',\n            JSON.stringify(offsets),\n          );\n          return out;\n        }\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n * Handy for calculating how many new items will be rendered when the render window changes so we\n * can restrict the number of new items render at once so that content can appear on the screen\n * faster.\n */\nexport function newRangeCount(\n  prev: {\n    first: number,\n    last: number,\n    ...\n  },\n  next: {\n    first: number,\n    last: number,\n    ...\n  },\n): number {\n  return (\n    next.last -\n    next.first +\n    1 -\n    Math.max(\n      0,\n      1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first),\n    )\n  );\n}\n\n/**\n * Custom logic for determining which items should be rendered given the current frame and scroll\n * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n * biased in the direction of scroll.\n */\nexport function computeWindowedRenderLimits(\n  data: any,\n  getItemCount: (data: any) => number,\n  maxToRenderPerBatch: number,\n  windowSize: number,\n  prev: {\n    first: number,\n    last: number,\n    ...\n  },\n  getFrameMetricsApprox: (index: number) => {\n    length: number,\n    offset: number,\n    ...\n  },\n  scrollMetrics: {\n    dt: number,\n    offset: number,\n    velocity: number,\n    visibleLength: number,\n    ...\n  },\n): {\n  first: number,\n  last: number,\n  ...\n} {\n  const itemCount = getItemCount(data);\n  if (itemCount === 0) {\n    return prev;\n  }\n  const {offset, velocity, visibleLength} = scrollMetrics;\n\n  // Start with visible area, then compute maximum overscan region by expanding from there, biased\n  // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n  // too.\n  const visibleBegin = Math.max(0, offset);\n  const visibleEnd = visibleBegin + visibleLength;\n  const overscanLength = (windowSize - 1) * visibleLength;\n\n  // Considering velocity seems to introduce more churn than it's worth.\n  const leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n  const fillPreference =\n    velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n\n  const overscanBegin = Math.max(\n    0,\n    visibleBegin - (1 - leadFactor) * overscanLength,\n  );\n  const overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n\n  const lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;\n  if (lastItemOffset < overscanBegin) {\n    // Entire list is before our overscan window\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1,\n    };\n  }\n\n  // Find the indices that correspond to the items at the render boundaries we're targeting.\n  let [overscanFirst, first, last, overscanLast] = elementsThatOverlapOffsets(\n    [overscanBegin, visibleBegin, visibleEnd, overscanEnd],\n    itemCount,\n    getFrameMetricsApprox,\n  );\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last =\n    last == null\n      ? Math.min(overscanLast, first + maxToRenderPerBatch - 1)\n      : last;\n  const visible = {first, last};\n\n  // We want to limit the number of new cells we're rendering per batch so that we can fill the\n  // content on the screen quickly. If we rendered the entire overscan window at once, the user\n  // could be staring at white space for a long time waiting for a bunch of offscreen content to\n  // render.\n  let newCellCount = newRangeCount(prev, visible);\n\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      // If we fill the entire overscan range, we're done.\n      break;\n    }\n    const maxNewCells = newCellCount >= maxToRenderPerBatch;\n    const firstWillAddMore = first <= prev.first || first > prev.last;\n    const firstShouldIncrement =\n      first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    const lastWillAddMore = last >= prev.last || last < prev.first;\n    const lastShouldIncrement =\n      last < overscanLast && (!maxNewCells || !lastWillAddMore);\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n      // without rendering new items. This let's us preserve as many already rendered items as\n      // possible, reducing render churn and keeping the rendered overscan range as large as\n      // possible.\n      break;\n    }\n    if (\n      firstShouldIncrement &&\n      !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)\n    ) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n      first--;\n    }\n    if (\n      lastShouldIncrement &&\n      !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)\n    ) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n      last++;\n    }\n  }\n  if (\n    !(\n      last >= first &&\n      first >= 0 &&\n      last < itemCount &&\n      first >= overscanFirst &&\n      last <= overscanLast &&\n      first <= visible.first &&\n      last >= visible.last\n    )\n  ) {\n    throw new Error(\n      'Bad window calculation ' +\n        JSON.stringify({\n          first,\n          last,\n          itemCount,\n          overscanFirst,\n          overscanLast,\n          visible,\n        }),\n    );\n  }\n  return {first, last};\n}\n\nexport function keyExtractor(item: any, index: number): string {\n  if (typeof item === 'object' && item?.key != null) {\n    return item.key;\n  }\n  if (typeof item === 'object' && item?.id != null) {\n    return item.id;\n  }\n  return String(index);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
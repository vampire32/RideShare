{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ScreenStackHeaderBackButtonImage, ScreenStackHeaderCenterView, ScreenStackHeaderConfig, ScreenStackHeaderLeftView, ScreenStackHeaderRightView, ScreenStackHeaderSearchBarView, SearchBar, isSearchBarAvailableForCurrentPlatform, executeNativeBackPress } from 'react-native-screens';\nimport { useBackPressSubscription } from \"../utils/useBackPressSubscription\";\nimport { processFonts } from \"./FontProcessor\";\nexport default function HeaderConfig(_ref) {\n  var backButtonImage = _ref.backButtonImage,\n    backButtonInCustomView = _ref.backButtonInCustomView,\n    direction = _ref.direction,\n    disableBackButtonMenu = _ref.disableBackButtonMenu,\n    headerBackTitle = _ref.headerBackTitle,\n    _ref$headerBackTitleS = _ref.headerBackTitleStyle,\n    headerBackTitleStyle = _ref$headerBackTitleS === void 0 ? {} : _ref$headerBackTitleS,\n    _ref$headerBackTitleV = _ref.headerBackTitleVisible,\n    headerBackTitleVisible = _ref$headerBackTitleV === void 0 ? true : _ref$headerBackTitleV,\n    headerCenter = _ref.headerCenter,\n    headerHideBackButton = _ref.headerHideBackButton,\n    headerHideShadow = _ref.headerHideShadow,\n    _ref$headerLargeStyle = _ref.headerLargeStyle,\n    headerLargeStyle = _ref$headerLargeStyle === void 0 ? {} : _ref$headerLargeStyle,\n    headerLargeTitle = _ref.headerLargeTitle,\n    headerLargeTitleHideShadow = _ref.headerLargeTitleHideShadow,\n    _ref$headerLargeTitle = _ref.headerLargeTitleStyle,\n    headerLargeTitleStyle = _ref$headerLargeTitle === void 0 ? {} : _ref$headerLargeTitle,\n    headerLeft = _ref.headerLeft,\n    headerRight = _ref.headerRight,\n    headerShown = _ref.headerShown,\n    _ref$headerStyle = _ref.headerStyle,\n    headerStyle = _ref$headerStyle === void 0 ? {} : _ref$headerStyle,\n    headerTintColor = _ref.headerTintColor,\n    headerTitle = _ref.headerTitle,\n    _ref$headerTitleStyle = _ref.headerTitleStyle,\n    headerTitleStyle = _ref$headerTitleStyle === void 0 ? {} : _ref$headerTitleStyle,\n    _ref$headerTopInsetEn = _ref.headerTopInsetEnabled,\n    headerTopInsetEnabled = _ref$headerTopInsetEn === void 0 ? true : _ref$headerTopInsetEn,\n    headerTranslucent = _ref.headerTranslucent,\n    route = _ref.route,\n    searchBar = _ref.searchBar,\n    title = _ref.title;\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var tintColor = headerTintColor !== null && headerTintColor !== void 0 ? headerTintColor : colors.primary;\n\n  var _useBackPressSubscrip = useBackPressSubscription({\n      onBackPress: executeNativeBackPress,\n      isDisabled: !searchBar || !!searchBar.disableBackButtonOverride\n    }),\n    handleAttached = _useBackPressSubscrip.handleAttached,\n    handleDetached = _useBackPressSubscrip.handleDetached,\n    clearSubscription = _useBackPressSubscrip.clearSubscription,\n    createSubscription = _useBackPressSubscrip.createSubscription;\n  var _processFonts = processFonts([headerBackTitleStyle.fontFamily, headerLargeTitleStyle.fontFamily, headerTitleStyle.fontFamily]),\n    _processFonts2 = _slicedToArray(_processFonts, 3),\n    backTitleFontFamily = _processFonts2[0],\n    largeTitleFontFamily = _processFonts2[1],\n    titleFontFamily = _processFonts2[2];\n\n  React.useEffect(function () {\n    return clearSubscription;\n  }, [searchBar]);\n  var processedSearchBarOptions = React.useMemo(function () {\n    if (Platform.OS === 'android' && searchBar && !searchBar.disableBackButtonOverride) {\n      var onFocus = function onFocus() {\n        var _searchBar$onFocus2;\n        var _searchBar$onFocus;\n        createSubscription();\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        (_searchBar$onFocus = searchBar.onFocus) === null || _searchBar$onFocus === void 0 ? void 0 : (_searchBar$onFocus2 = _searchBar$onFocus).call.apply(_searchBar$onFocus2, [searchBar].concat(args));\n      };\n      var onClose = function onClose() {\n        var _searchBar$onClose2;\n        var _searchBar$onClose;\n        clearSubscription();\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n        (_searchBar$onClose = searchBar.onClose) === null || _searchBar$onClose === void 0 ? void 0 : (_searchBar$onClose2 = _searchBar$onClose).call.apply(_searchBar$onClose2, [searchBar].concat(args));\n      };\n      return _objectSpread(_objectSpread({}, searchBar), {}, {\n        onFocus: onFocus,\n        onClose: onClose\n      });\n    }\n    return searchBar;\n  }, [searchBar, createSubscription, clearSubscription]);\n  return React.createElement(ScreenStackHeaderConfig, {\n    backButtonInCustomView: backButtonInCustomView,\n    backgroundColor: headerStyle.backgroundColor ? headerStyle.backgroundColor : colors.card,\n    backTitle: headerBackTitleVisible ? headerBackTitle : ' ',\n    backTitleFontFamily: backTitleFontFamily,\n    backTitleFontSize: headerBackTitleStyle.fontSize,\n    blurEffect: headerStyle.blurEffect,\n    color: tintColor,\n    direction: direction,\n    disableBackButtonMenu: disableBackButtonMenu,\n    hidden: headerShown === false,\n    hideBackButton: headerHideBackButton,\n    hideShadow: headerHideShadow,\n    largeTitle: headerLargeTitle,\n    largeTitleBackgroundColor: headerLargeStyle.backgroundColor,\n    largeTitleColor: headerLargeTitleStyle.color,\n    largeTitleFontFamily: largeTitleFontFamily,\n    largeTitleFontSize: headerLargeTitleStyle.fontSize,\n    largeTitleFontWeight: headerLargeTitleStyle.fontWeight,\n    largeTitleHideShadow: headerLargeTitleHideShadow,\n    title: headerTitle !== undefined ? headerTitle : title !== undefined ? title : route.name,\n    titleColor: headerTitleStyle.color !== undefined ? headerTitleStyle.color : headerTintColor !== undefined ? headerTintColor : colors.text,\n    titleFontFamily: titleFontFamily,\n    titleFontSize: headerTitleStyle.fontSize,\n    titleFontWeight: headerTitleStyle.fontWeight,\n    topInsetEnabled: headerTopInsetEnabled,\n    translucent: headerTranslucent === true,\n    onAttached: handleAttached,\n    onDetached: handleDetached\n  }, headerRight !== undefined ? React.createElement(ScreenStackHeaderRightView, null, headerRight({\n    tintColor: tintColor\n  })) : null, backButtonImage !== undefined ? React.createElement(ScreenStackHeaderBackButtonImage, {\n    key: \"backImage\",\n    source: backButtonImage\n  }) : null, headerLeft !== undefined ? React.createElement(ScreenStackHeaderLeftView, null, headerLeft({\n    tintColor: tintColor\n  })) : null, headerCenter !== undefined ? React.createElement(ScreenStackHeaderCenterView, null, headerCenter({\n    tintColor: tintColor\n  })) : null, isSearchBarAvailableForCurrentPlatform && processedSearchBarOptions !== undefined ? React.createElement(ScreenStackHeaderSearchBarView, null, React.createElement(SearchBar, processedSearchBarOptions)) : null);\n}","map":{"version":3,"mappings":"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","names":["useTheme","React","ScreenStackHeaderBackButtonImage","ScreenStackHeaderCenterView","ScreenStackHeaderConfig","ScreenStackHeaderLeftView","ScreenStackHeaderRightView","ScreenStackHeaderSearchBarView","SearchBar","isSearchBarAvailableForCurrentPlatform","executeNativeBackPress","useBackPressSubscription","processFonts","HeaderConfig","backButtonImage","backButtonInCustomView","direction","disableBackButtonMenu","headerBackTitle","headerBackTitleStyle","headerBackTitleVisible","headerCenter","headerHideBackButton","headerHideShadow","headerLargeStyle","headerLargeTitle","headerLargeTitleHideShadow","headerLargeTitleStyle","headerLeft","headerRight","headerShown","headerStyle","headerTintColor","headerTitle","headerTitleStyle","headerTopInsetEnabled","headerTranslucent","route","searchBar","title","colors","tintColor","primary","onBackPress","isDisabled","disableBackButtonOverride","handleAttached","handleDetached","clearSubscription","createSubscription","fontFamily","backTitleFontFamily","largeTitleFontFamily","titleFontFamily","useEffect","processedSearchBarOptions","useMemo","Platform","OS","onFocus","args","onClose","backgroundColor","card","backTitle","backTitleFontSize","fontSize","blurEffect","color","hidden","hideBackButton","hideShadow","largeTitle","largeTitleBackgroundColor","largeTitleColor","largeTitleFontSize","largeTitleFontWeight","fontWeight","largeTitleHideShadow","undefined","name","titleColor","text","titleFontSize","titleFontWeight","topInsetEnabled","translucent","onAttached","onDetached","key","source"],"sources":["HeaderConfig.tsx"],"sourcesContent":["import { Route, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderConfig,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderSearchBarView,\n  SearchBar,\n  SearchBarProps,\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from 'react-native-screens';\nimport { NativeStackNavigationOptions } from '../types';\nimport { useBackPressSubscription } from '../utils/useBackPressSubscription';\nimport { processFonts } from './FontProcessor';\n\ntype Props = NativeStackNavigationOptions & {\n  route: Route<string>;\n};\n\nexport default function HeaderConfig({\n  backButtonImage,\n  backButtonInCustomView,\n  direction,\n  disableBackButtonMenu,\n  headerBackTitle,\n  headerBackTitleStyle = {},\n  headerBackTitleVisible = true,\n  headerCenter,\n  headerHideBackButton,\n  headerHideShadow,\n  headerLargeStyle = {},\n  headerLargeTitle,\n  headerLargeTitleHideShadow,\n  headerLargeTitleStyle = {},\n  headerLeft,\n  headerRight,\n  headerShown,\n  headerStyle = {},\n  headerTintColor,\n  headerTitle,\n  headerTitleStyle = {},\n  headerTopInsetEnabled = true,\n  headerTranslucent,\n  route,\n  searchBar,\n  title,\n}: Props): JSX.Element {\n  const { colors } = useTheme();\n  const tintColor = headerTintColor ?? colors.primary;\n\n  // We need to use back press subscription here to override back button behavior on JS side.\n  // Because screens are usually used with react-navigation and this library overrides back button\n  // we need to handle it first in case when search bar is open\n  const {\n    handleAttached,\n    handleDetached,\n    clearSubscription,\n    createSubscription,\n  } = useBackPressSubscription({\n    onBackPress: executeNativeBackPress,\n    isDisabled: !searchBar || !!searchBar.disableBackButtonOverride,\n  });\n\n  const [\n    backTitleFontFamily,\n    largeTitleFontFamily,\n    titleFontFamily,\n  ] = processFonts([\n    headerBackTitleStyle.fontFamily,\n    headerLargeTitleStyle.fontFamily,\n    headerTitleStyle.fontFamily,\n  ]);\n\n  // We want to clear clearSubscription only when components unmounts or search bar changes\n  React.useEffect(() => clearSubscription, [searchBar]);\n\n  const processedSearchBarOptions = React.useMemo(() => {\n    if (\n      Platform.OS === 'android' &&\n      searchBar &&\n      !searchBar.disableBackButtonOverride\n    ) {\n      const onFocus: SearchBarProps['onFocus'] = (...args) => {\n        createSubscription();\n        searchBar.onFocus?.(...args);\n      };\n      const onClose: SearchBarProps['onClose'] = (...args) => {\n        clearSubscription();\n        searchBar.onClose?.(...args);\n      };\n\n      return { ...searchBar, onFocus, onClose };\n    }\n    return searchBar;\n  }, [searchBar, createSubscription, clearSubscription]);\n\n  return (\n    <ScreenStackHeaderConfig\n      backButtonInCustomView={backButtonInCustomView}\n      backgroundColor={\n        headerStyle.backgroundColor ? headerStyle.backgroundColor : colors.card\n      }\n      backTitle={headerBackTitleVisible ? headerBackTitle : ' '}\n      backTitleFontFamily={backTitleFontFamily}\n      backTitleFontSize={headerBackTitleStyle.fontSize}\n      blurEffect={headerStyle.blurEffect}\n      color={tintColor}\n      direction={direction}\n      disableBackButtonMenu={disableBackButtonMenu}\n      hidden={headerShown === false}\n      hideBackButton={headerHideBackButton}\n      hideShadow={headerHideShadow}\n      largeTitle={headerLargeTitle}\n      largeTitleBackgroundColor={headerLargeStyle.backgroundColor}\n      largeTitleColor={headerLargeTitleStyle.color}\n      largeTitleFontFamily={largeTitleFontFamily}\n      largeTitleFontSize={headerLargeTitleStyle.fontSize}\n      largeTitleFontWeight={headerLargeTitleStyle.fontWeight}\n      largeTitleHideShadow={headerLargeTitleHideShadow}\n      title={\n        headerTitle !== undefined\n          ? headerTitle\n          : title !== undefined\n          ? title\n          : route.name\n      }\n      titleColor={\n        headerTitleStyle.color !== undefined\n          ? headerTitleStyle.color\n          : headerTintColor !== undefined\n          ? headerTintColor\n          : colors.text\n      }\n      titleFontFamily={titleFontFamily}\n      titleFontSize={headerTitleStyle.fontSize}\n      titleFontWeight={headerTitleStyle.fontWeight}\n      topInsetEnabled={headerTopInsetEnabled}\n      translucent={headerTranslucent === true}\n      onAttached={handleAttached}\n      onDetached={handleDetached}>\n      {headerRight !== undefined ? (\n        <ScreenStackHeaderRightView>\n          {headerRight({ tintColor })}\n        </ScreenStackHeaderRightView>\n      ) : null}\n      {backButtonImage !== undefined ? (\n        <ScreenStackHeaderBackButtonImage\n          key=\"backImage\"\n          source={backButtonImage}\n        />\n      ) : null}\n      {headerLeft !== undefined ? (\n        <ScreenStackHeaderLeftView>\n          {headerLeft({ tintColor })}\n        </ScreenStackHeaderLeftView>\n      ) : null}\n      {headerCenter !== undefined ? (\n        <ScreenStackHeaderCenterView>\n          {headerCenter({ tintColor })}\n        </ScreenStackHeaderCenterView>\n      ) : null}\n      {isSearchBarAvailableForCurrentPlatform &&\n      processedSearchBarOptions !== undefined ? (\n        <ScreenStackHeaderSearchBarView>\n          <SearchBar {...processedSearchBarOptions} />\n        </ScreenStackHeaderSearchBarView>\n      ) : null}\n    </ScreenStackHeaderConfig>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
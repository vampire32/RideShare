{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport InteractionManager from \"../../../exports/InteractionManager\";\n\nvar Batchinator = function () {\n  function Batchinator(callback, delayMS) {\n    _classCallCheck(this, Batchinator);\n\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n\n  Batchinator.prototype.dispose = function dispose() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      abort: false\n    };\n\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n\n      if (!options.abort) {\n        this._callback();\n      }\n\n      this._taskHandle = null;\n    }\n  };\n\n  Batchinator.prototype.schedule = function schedule() {\n    var _this = this;\n\n    if (this._taskHandle) {\n      return;\n    }\n\n    var timeoutHandle = setTimeout(function () {\n      _this._taskHandle = InteractionManager.runAfterInteractions(function () {\n        _this._taskHandle = null;\n\n        _this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {\n      cancel: function cancel() {\n        return clearTimeout(timeoutHandle);\n      }\n    };\n  };\n\n  return Batchinator;\n}();\n\nexport default Batchinator;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","InteractionManager","Batchinator","callback","delayMS","_delay","_callback","prototype","dispose","options","arguments","length","undefined","abort","_taskHandle","cancel","schedule","_this","timeoutHandle","setTimeout","runAfterInteractions","clearTimeout"],"sources":["D:/React/TaxiApp/cabApp/node_modules/react-native-phone-number-input/node_modules/react-native-web/dist/vendor/react-native/Batchinator/index.js"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport InteractionManager from '../../../exports/InteractionManager';\n\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\n\nvar Batchinator = function () {\n  function Batchinator(callback, delayMS) {\n    _classCallCheck(this, Batchinator);\n\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n\n\n  Batchinator.prototype.dispose = function dispose() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { abort: false };\n\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n      if (!options.abort) {\n        this._callback();\n      }\n      this._taskHandle = null;\n    }\n  };\n\n  Batchinator.prototype.schedule = function schedule() {\n    var _this = this;\n\n    if (this._taskHandle) {\n      return;\n    }\n    var timeoutHandle = setTimeout(function () {\n      _this._taskHandle = InteractionManager.runAfterInteractions(function () {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        _this._taskHandle = null;\n        _this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = { cancel: function cancel() {\n        return clearTimeout(timeoutHandle);\n      } };\n  };\n\n  return Batchinator;\n}();\n\nexport default Batchinator;"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;IAAE,MAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;EAA2D;AAAE;;AAWzJ,OAAOC,kBAAP;;AAyBA,IAAIC,WAAW,GAAG,YAAY;EAC5B,SAASA,WAAT,CAAqBC,QAArB,EAA+BC,OAA/B,EAAwC;IACtCP,eAAe,CAAC,IAAD,EAAOK,WAAP,CAAf;;IAEA,KAAKG,MAAL,GAAcD,OAAd;IACA,KAAKE,SAAL,GAAiBH,QAAjB;EACD;;EASDD,WAAW,CAACK,SAAZ,CAAsBC,OAAtB,GAAgC,SAASA,OAAT,GAAmB;IACjD,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE;MAAEG,KAAK,EAAE;IAAT,CAAlF;;IAEA,IAAI,KAAKC,WAAT,EAAsB;MACpB,KAAKA,WAAL,CAAiBC,MAAjB;;MACA,IAAI,CAACN,OAAO,CAACI,KAAb,EAAoB;QAClB,KAAKP,SAAL;MACD;;MACD,KAAKQ,WAAL,GAAmB,IAAnB;IACD;EACF,CAVD;;EAYAZ,WAAW,CAACK,SAAZ,CAAsBS,QAAtB,GAAiC,SAASA,QAAT,GAAoB;IACnD,IAAIC,KAAK,GAAG,IAAZ;;IAEA,IAAI,KAAKH,WAAT,EAAsB;MACpB;IACD;;IACD,IAAII,aAAa,GAAGC,UAAU,CAAC,YAAY;MACzCF,KAAK,CAACH,WAAN,GAAoBb,kBAAkB,CAACmB,oBAAnB,CAAwC,YAAY;QAGtEH,KAAK,CAACH,WAAN,GAAoB,IAApB;;QACAG,KAAK,CAACX,SAAN;MACD,CALmB,CAApB;IAMD,CAP6B,EAO3B,KAAKD,MAPsB,CAA9B;IAQA,KAAKS,WAAL,GAAmB;MAAEC,MAAM,EAAE,SAASA,MAAT,GAAkB;QAC3C,OAAOM,YAAY,CAACH,aAAD,CAAnB;MACD;IAFgB,CAAnB;EAGD,CAjBD;;EAmBA,OAAOhB,WAAP;AACD,CA/CiB,EAAlB;;AAiDA,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nexport function useBackPressSubscription(_ref) {\n  var onBackPress = _ref.onBackPress,\n    isDisabled = _ref.isDisabled;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isActive = _React$useState2[0],\n    setIsActive = _React$useState2[1];\n  var subscription = React.useRef();\n  var clearSubscription = React.useCallback(function () {\n    var shouldSetActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var _subscription$current;\n    (_subscription$current = subscription.current) === null || _subscription$current === void 0 ? void 0 : _subscription$current.remove();\n    subscription.current = undefined;\n    if (shouldSetActive) setIsActive(false);\n  }, []);\n  var createSubscription = React.useCallback(function () {\n    if (!isDisabled) {\n      var _subscription$current2;\n      (_subscription$current2 = subscription.current) === null || _subscription$current2 === void 0 ? void 0 : _subscription$current2.remove();\n      subscription.current = BackHandler.addEventListener('hardwareBackPress', onBackPress);\n      setIsActive(true);\n    }\n  }, [isDisabled, onBackPress]);\n  var handleAttached = React.useCallback(function () {\n    if (isActive) {\n      createSubscription();\n    }\n  }, [createSubscription, isActive]);\n  var handleDetached = React.useCallback(function () {\n    clearSubscription(false);\n  }, [clearSubscription]);\n  React.useEffect(function () {\n    if (isDisabled) {\n      clearSubscription();\n    }\n  }, [isDisabled, clearSubscription]);\n  return {\n    handleAttached: handleAttached,\n    handleDetached: handleDetached,\n    createSubscription: createSubscription,\n    clearSubscription: clearSubscription\n  };\n}","map":{"version":3,"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAAA;AAmBA,OAAO,SAASC,wBAAT,OAG4B;EAAA,IAFjCC,WADuC,QACvCA,WADuC;IAEvCC;EAEA,sBAAgCH,KAAK,CAACI,QAAN,CAAe,KAAf,CAAhC;IAAA;IAAOC,QAAD;IAAWC,WAAX;EACN,IAAMC,YAAY,GAAGP,KAAK,CAACQ,MAAN,EAArB;EAEA,IAAMC,iBAAiB,GAAGT,KAAK,CAACU,WAAN,CAAkB,YAA4B;IAAA,IAA3BC,eAAe,uEAAG,IAAnB;IAA4B;IACtE,qCAAY,CAACC,OAAb,gFAAsBC,MAAtB;IACAN,YAAY,CAACK,OAAb,GAAuBE,SAAvB;IACA,IAAIH,eAAJ,EAAqBL,WAAW,CAAC,KAAD,CAAX;EACtB,CAJyB,EAIvB,EAJuB,CAA1B;EAMA,IAAMS,kBAAkB,GAAGf,KAAK,CAACU,WAAN,CAAkB,YAAM;IACjD,IAAI,CAACP,UAAL,EAAiB;MAAA;MACf,sCAAY,CAACS,OAAb,kFAAsBC,MAAtB;MACAN,YAAY,CAACK,OAAb,GAAuBI,WAAW,CAACC,gBAAZ,CACrB,mBADqB,EAErBf,WAFqB,CAAvB;MAIAI,WAAW,CAAC,IAAD,CAAX;IACD;EACF,CAT0B,EASxB,CAACH,UAAD,EAAaD,WAAb,CATwB,CAA3B;EAWA,IAAMgB,cAAc,GAAGlB,KAAK,CAACU,WAAN,CAAkB,YAAM;IAC7C,IAAIL,QAAJ,EAAc;MACZU,kBAAkB;IACnB;EACF,CAJsB,EAIpB,CAACA,kBAAD,EAAqBV,QAArB,CAJoB,CAAvB;EAMA,IAAMc,cAAc,GAAGnB,KAAK,CAACU,WAAN,CAAkB,YAAM;IAC7CD,iBAAiB,CAAC,KAAD,CAAjB;EACD,CAFsB,EAEpB,CAACA,iBAAD,CAFoB,CAAvB;EAIAT,KAAK,CAACoB,SAAN,CAAgB,YAAM;IACpB,IAAIjB,UAAJ,EAAgB;MACdM,iBAAiB;IAClB;EACF,CAJD,EAIG,CAACN,UAAD,EAAaM,iBAAb,CAJH;EAMA,OAAO;IACLS,cADK,EACLA,cADK;IAELC,cAFK,EAELA,cAFK;IAGLJ,kBAHK,EAGLA,kBAHK;IAILN;EAJK,CAAP;AAMD","names":["React","useBackPressSubscription","onBackPress","isDisabled","useState","isActive","setIsActive","subscription","useRef","clearSubscription","useCallback","shouldSetActive","current","remove","undefined","createSubscription","BackHandler","addEventListener","handleAttached","handleDetached","useEffect"],"sources":["useBackPressSubscription.tsx"],"sourcesContent":["import React from 'react';\nimport { BackHandler, NativeEventSubscription } from 'react-native';\n\ninterface Args {\n  onBackPress: () => boolean;\n  isDisabled: boolean;\n}\n\ninterface UseBackPressSubscription {\n  handleAttached: () => void;\n  handleDetached: () => void;\n  createSubscription: () => void;\n  clearSubscription: () => void;\n}\n\n/**\n * This hook is an abstraction for keeping back press subscription\n * logic in one place.\n */\nexport function useBackPressSubscription({\n  onBackPress,\n  isDisabled,\n}: Args): UseBackPressSubscription {\n  const [isActive, setIsActive] = React.useState(false);\n  const subscription = React.useRef<NativeEventSubscription | undefined>();\n\n  const clearSubscription = React.useCallback((shouldSetActive = true) => {\n    subscription.current?.remove();\n    subscription.current = undefined;\n    if (shouldSetActive) setIsActive(false);\n  }, []);\n\n  const createSubscription = React.useCallback(() => {\n    if (!isDisabled) {\n      subscription.current?.remove();\n      subscription.current = BackHandler.addEventListener(\n        'hardwareBackPress',\n        onBackPress\n      );\n      setIsActive(true);\n    }\n  }, [isDisabled, onBackPress]);\n\n  const handleAttached = React.useCallback(() => {\n    if (isActive) {\n      createSubscription();\n    }\n  }, [createSubscription, isActive]);\n\n  const handleDetached = React.useCallback(() => {\n    clearSubscription(false);\n  }, [clearSubscription]);\n\n  React.useEffect(() => {\n    if (isDisabled) {\n      clearSubscription();\n    }\n  }, [isDisabled, clearSubscription]);\n\n  return {\n    handleAttached,\n    handleDetached,\n    createSubscription,\n    clearSubscription,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
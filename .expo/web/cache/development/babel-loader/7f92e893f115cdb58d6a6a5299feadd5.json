{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport AccessibilityUtil from \"../../modules/AccessibilityUtil\";\nimport BoundingDimensions from \"./BoundingDimensions\";\nimport findNodeHandle from \"../findNodeHandle\";\nimport normalizeColor from 'normalize-css-color';\nimport Position from \"./Position\";\nimport React from 'react';\nimport TouchEventUtils from 'fbjs/lib/TouchEventUtils';\nimport UIManager from \"../UIManager\";\nimport View from \"../View\";\nvar States = {\n  NOT_RESPONDER: 'NOT_RESPONDER',\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n  ERROR: 'ERROR'\n};\nvar IsActive = {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n};\nvar IsPressingIn = {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n};\nvar IsLongPressingIn = {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n};\nvar Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'\n};\nvar Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER\n  }\n};\nvar HIGHLIGHT_DELAY_MS = 130;\nvar PRESS_EXPAND_PX = 20;\nvar LONG_PRESS_THRESHOLD = 500;\nvar LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\nvar LONG_PRESS_ALLOWED_MOVEMENT = 10;\nvar TouchableMixin = {\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    this._touchableNode = findNodeHandle(this);\n\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableBlurListener = function (e) {\n        if (_this._isTouchableKeyboardActive) {\n          if (_this.state.touchable.touchState && _this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            _this.touchableHandleResponderTerminate({\n              nativeEvent: e\n            });\n          }\n\n          _this._isTouchableKeyboardActive = false;\n        }\n      };\n\n      this._touchableNode.addEventListener('blur', this._touchableBlurListener);\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableNode.removeEventListener('blur', this._touchableBlurListener);\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n  touchableGetInitialState: function touchableGetInitialState() {\n    return {\n      touchable: {\n        touchState: undefined,\n        responderID: null\n      }\n    };\n  },\n  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {\n    return !this.props.rejectResponderTermination;\n  },\n  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {\n    return !this.props.disabled;\n  },\n  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {\n    return true;\n  },\n  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {\n    var dispatchID = e.currentTarget;\n    e.persist();\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n\n    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);\n    } else {\n      this.state.touchable.positionOnActivate = null;\n\n      this._handleDelay(e);\n    }\n\n    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);\n  },\n  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n  touchableHandleResponderMove: function touchableHandleResponderMove(e) {\n    if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {\n      return;\n    }\n\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    var positionOnActivate = this.state.touchable.positionOnActivate;\n    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {\n      left: PRESS_EXPAND_PX,\n      right: PRESS_EXPAND_PX,\n      top: PRESS_EXPAND_PX,\n      bottom: PRESS_EXPAND_PX\n    };\n    var pressExpandLeft = pressRectOffset.left;\n    var pressExpandTop = pressRectOffset.top;\n    var pressExpandRight = pressRectOffset.right;\n    var pressExpandBottom = pressRectOffset.bottom;\n    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left;\n      pressExpandTop += hitSlop.top;\n      pressExpandRight += hitSlop.right;\n      pressExpandBottom += hitSlop.bottom;\n    }\n\n    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);\n\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;\n\n    if (isTouchWithinActive) {\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n\n      var curState = this.state.touchable.touchState;\n\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {\n    var tag = this.state.touchable.responderID;\n\n    if (tag == null) {\n      return;\n    }\n\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n  _handleQueryLayout: function _handleQueryLayout(x, y, width, height, globalX, globalY) {\n    if (!x && !y && !width && !height && !globalX && !globalY) {\n      return;\n    }\n\n    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(width, height);\n  },\n  _handleDelay: function _handleDelay(e) {\n    this.touchableDelayTimeout = null;\n\n    this._receiveSignal(Signals.DELAY, e);\n  },\n  _handleLongDelay: function _handleLongDelay(e) {\n    this.longPressDelayTimeout = null;\n    var curState = this.state.touchable.touchState;\n\n    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {\n      console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n  _receiveSignal: function _receiveSignal(signal, e) {\n    var responderID = this.state.touchable.responderID;\n    var curState = this.state.touchable.touchState;\n    var nextState = Transitions[curState] && Transitions[curState][signal];\n\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n\n    if (!nextState) {\n      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');\n    }\n\n    if (nextState === States.ERROR) {\n      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');\n    }\n\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n\n      this.state.touchable.touchState = nextState;\n    }\n  },\n  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n  _isHighlight: function _isHighlight(state) {\n    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;\n  },\n  _savePressInLocation: function _savePressInLocation(e) {\n    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n    this.pressInLocation = {\n      pageX: pageX,\n      pageY: pageY,\n\n      get locationX() {\n        return touch && touch.locationX;\n      },\n\n      get locationY() {\n        return touch && touch.locationY;\n      }\n\n    };\n  },\n  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {\n    var deltaX = aX - bX;\n    var deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {\n    var curIsHighlight = this._isHighlight(curState);\n\n    var newIsHighlight = this._isHighlight(nextState);\n\n    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    if (!IsActive[curState] && IsActive[nextState]) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      var hasLongPressHandler = !!this.props.onLongPress;\n      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());\n      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          this._startHighlight(e);\n\n          this._endHighlight(e);\n        }\n\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n  _startHighlight: function _startHighlight(e) {\n    this._savePressInLocation(e);\n\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n  _endHighlight: function _endHighlight(e) {\n    var _this2 = this;\n\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(function () {\n          _this2.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n  touchableHandleKeyEvent: function touchableHandleKeyEvent(e) {\n    var ENTER = 13;\n    var SPACE = 32;\n    var type = e.type,\n        which = e.which;\n\n    if (which === ENTER || which === SPACE) {\n      if (type === 'keydown') {\n        if (!this._isTouchableKeyboardActive) {\n          if (!this.state.touchable.touchState || this.state.touchable.touchState === States.NOT_RESPONDER) {\n            this.touchableHandleResponderGrant(e);\n            this._isTouchableKeyboardActive = true;\n          }\n        }\n      } else if (type === 'keyup') {\n        if (this._isTouchableKeyboardActive) {\n          if (this.state.touchable.touchState && this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            this.touchableHandleResponderRelease(e);\n            this._isTouchableKeyboardActive = false;\n          }\n        }\n      }\n\n      e.stopPropagation();\n\n      if (!(which === ENTER && AccessibilityUtil.propsToAriaRole(this.props) === 'link')) {\n        e.preventDefault();\n      }\n    }\n  }\n};\nvar Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false,\n  renderDebugView: function renderDebugView(_ref) {\n    var color = _ref.color,\n        hitSlop = _ref.hitSlop;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Touchable.TOUCH_TARGET_DEBUG) {\n        return null;\n      }\n\n      var debugHitSlopStyle = {};\n      hitSlop = hitSlop || {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0\n      };\n\n      for (var key in hitSlop) {\n        debugHitSlopStyle[key] = -hitSlop[key];\n      }\n\n      var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);\n      return React.createElement(View, {\n        pointerEvents: 'none',\n        style: _extends({\n          position: 'absolute',\n          borderColor: hexColor.slice(0, -2) + '55',\n          borderWidth: 1,\n          borderStyle: 'dashed',\n          backgroundColor: hexColor.slice(0, -2) + '0F'\n        }, debugHitSlopStyle)\n      });\n    }\n  }\n};\nexport default Touchable;","map":{"version":3,"names":["AccessibilityUtil","BoundingDimensions","findNodeHandle","normalizeColor","Position","React","TouchEventUtils","UIManager","View","States","NOT_RESPONDER","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","IsActive","IsPressingIn","IsLongPressingIn","Signals","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","Transitions","error","HIGHLIGHT_DELAY_MS","PRESS_EXPAND_PX","LONG_PRESS_THRESHOLD","LONG_PRESS_DELAY_MS","LONG_PRESS_ALLOWED_MOVEMENT","TouchableMixin","componentDidMount","_this","_touchableNode","addEventListener","_touchableBlurListener","e","_isTouchableKeyboardActive","state","touchable","touchState","touchableHandleResponderTerminate","nativeEvent","componentWillUnmount","removeEventListener","touchableDelayTimeout","clearTimeout","longPressDelayTimeout","pressOutDelayTimeout","touchableGetInitialState","undefined","responderID","touchableHandleResponderTerminationRequest","props","rejectResponderTermination","touchableHandleStartShouldSetResponder","disabled","touchableLongPressCancelsPress","touchableHandleResponderGrant","dispatchID","currentTarget","persist","_receiveSignal","delayMS","touchableGetHighlightDelayMS","Math","max","isNaN","setTimeout","_handleDelay","bind","positionOnActivate","longDelayMS","touchableGetLongPressDelayMS","_handleLongDelay","touchableHandleResponderRelease","touchableHandleResponderMove","dimensionsOnActivate","pressRectOffset","touchableGetPressRectOffset","left","right","top","bottom","pressExpandLeft","pressExpandTop","pressExpandRight","pressExpandBottom","hitSlop","touchableGetHitSlop","touch","extractSingleTouch","pageX","pageY","pressInLocation","movedDistance","_getDistanceBetweenPoints","_cancelLongPressDelayTimeout","isTouchWithinActive","width","height","curState","_remeasureMetricsOnActivation","tag","measure","_handleQueryLayout","x","y","globalX","globalY","release","getPooled","console","signal","nextState","Error","_performSideEffectsForTransition","_isHighlight","_savePressInLocation","locationX","locationY","aX","aY","bX","bY","deltaX","deltaY","sqrt","curIsHighlight","newIsHighlight","isFinalSignal","touchableHandleLongPress","_startHighlight","_endHighlight","hasLongPressHandler","onLongPress","pressIsLongButStillCallOnPress","shouldInvokePress","touchableHandlePress","touchableHandleActivePressIn","_this2","touchableHandleActivePressOut","touchableGetPressOutDelayMS","touchableHandleKeyEvent","ENTER","SPACE","type","which","stopPropagation","propsToAriaRole","preventDefault","Touchable","Mixin","TOUCH_TARGET_DEBUG","renderDebugView","_ref","color","process","env","NODE_ENV","debugHitSlopStyle","key","hexColor","toString","substr","createElement","pointerEvents","style","position","borderColor","slice","borderWidth","borderStyle","backgroundColor"],"sources":["D:/React/TaxiApp/cabApp/node_modules/react-native-phone-number-input/node_modules/react-native-web/dist/exports/Touchable/index.js"],"sourcesContent":["/* eslint-disable react/prop-types */\n\n/**\n * Copyright (c) 2016-present, Nicolas Gallagher.\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport AccessibilityUtil from '../../modules/AccessibilityUtil';\nimport BoundingDimensions from './BoundingDimensions';\nimport findNodeHandle from '../findNodeHandle';\nimport normalizeColor from 'normalize-css-color';\nimport Position from './Position';\nimport React from 'react';\nimport TouchEventUtils from 'fbjs/lib/TouchEventUtils';\nimport UIManager from '../UIManager';\nimport View from '../View';\n\n/**\n * `Touchable`: Taps done right.\n *\n * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`\n * will measure time/geometry and tells you when to give feedback to the user.\n *\n * ====================== Touchable Tutorial ===============================\n * The `Touchable` mixin helps you handle the \"press\" interaction. It analyzes\n * the geometry of elements, and observes when another responder (scroll view\n * etc) has stolen the touch lock. It notifies your component when it should\n * give feedback to the user. (bouncing/highlighting/unhighlighting).\n *\n * - When a touch was activated (typically you highlight)\n * - When a touch was deactivated (typically you unhighlight)\n * - When a touch was \"pressed\" - a touch ended while still within the geometry\n *   of the element, and no other element (like scroller) has \"stolen\" touch\n *   lock (\"responder\") (Typically you bounce the element).\n *\n * A good tap interaction isn't as simple as you might think. There should be a\n * slight delay before showing a highlight when starting a touch. If a\n * subsequent touch move exceeds the boundary of the element, it should\n * unhighlight, but if that same touch is brought back within the boundary, it\n * should rehighlight again. A touch can move in and out of that boundary\n * several times, each time toggling highlighting, but a \"press\" is only\n * triggered if that touch ends while within the element's boundary and no\n * scroller (or anything else) has stolen the lock on touches.\n *\n * To create a new type of component that handles interaction using the\n * `Touchable` mixin, do the following:\n *\n * - Initialize the `Touchable` state.\n *\n *   getInitialState: function() {\n *     return merge(this.touchableGetInitialState(), yourComponentState);\n *   }\n *\n * - Choose the rendered component who's touches should start the interactive\n *   sequence. On that rendered node, forward all `Touchable` responder\n *   handlers. You can choose any rendered node you like. Choose a node whose\n *   hit target you'd like to instigate the interaction sequence:\n *\n *   // In render function:\n *   return (\n *     <View\n *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}\n *       onResponderGrant={this.touchableHandleResponderGrant}\n *       onResponderMove={this.touchableHandleResponderMove}\n *       onResponderRelease={this.touchableHandleResponderRelease}\n *       onResponderTerminate={this.touchableHandleResponderTerminate}>\n *       <View>\n *         Even though the hit detection/interactions are triggered by the\n *         wrapping (typically larger) node, we usually end up implementing\n *         custom logic that highlights this inner one.\n *       </View>\n *     </View>\n *   );\n *\n * - You may set up your own handlers for each of these events, so long as you\n *   also invoke the `touchable*` handlers inside of your custom handler.\n *\n * - Implement the handlers on your component class in order to provide\n *   feedback to the user. See documentation for each of these class methods\n *   that you should implement.\n *\n *   touchableHandlePress: function() {\n *      this.performBounceAnimation();  // or whatever you want to do.\n *   },\n *   touchableHandleActivePressIn: function() {\n *     this.beginHighlighting(...);  // Whatever you like to convey activation\n *   },\n *   touchableHandleActivePressOut: function() {\n *     this.endHighlighting(...);  // Whatever you like to convey deactivation\n *   },\n *\n * - There are more advanced methods you can implement (see documentation below):\n *   touchableGetHighlightDelayMS: function() {\n *     return 20;\n *   }\n *   // In practice, *always* use a predeclared constant (conserve memory).\n *   touchableGetPressRectOffset: function() {\n *     return {top: 20, left: 20, right: 20, bottom: 100};\n *   }\n */\n\n/**\n * Touchable states.\n */\nvar States = {\n  NOT_RESPONDER: 'NOT_RESPONDER', // Not the responder\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN', // Responder, inactive, in the `PressRect`\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT', // Responder, inactive, out of `PressRect`\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN', // Responder, active, in the `PressRect`\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT', // Responder, active, out of `PressRect`\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN', // Responder, active, in the `PressRect`, after long press threshold\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT', // Responder, active, out of `PressRect`, after long press threshold\n  ERROR: 'ERROR'\n};\n\n/**\n * Quick lookup map for states that are considered to be \"active\"\n */\nvar IsActive = {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n};\n\n/**\n * Quick lookup for states that are considered to be \"pressing\" and are\n * therefore eligible to result in a \"selection\" if the press stops.\n */\nvar IsPressingIn = {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n};\n\nvar IsLongPressingIn = {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n};\n\n/**\n * Inputs to the state machine.\n */\nvar Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'\n};\n\n/**\n * Mapping from States x Signals => States\n */\nvar Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER\n  }\n};\n\n// ==== Typical Constants for integrating into UI components ====\n// var HIT_EXPAND_PX = 20;\n// var HIT_VERT_OFFSET_PX = 10;\nvar HIGHLIGHT_DELAY_MS = 130;\n\nvar PRESS_EXPAND_PX = 20;\n\nvar LONG_PRESS_THRESHOLD = 500;\n\nvar LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\n\nvar LONG_PRESS_ALLOWED_MOVEMENT = 10;\n\n// Default amount \"active\" region protrudes beyond box\n\n/**\n * By convention, methods prefixed with underscores are meant to be @private,\n * and not @protected. Mixers shouldn't access them - not even to provide them\n * as callback handlers.\n *\n *\n * ========== Geometry =========\n * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n *  +--------------------------+\n *  |                          | - \"Start\" events in `HitRect` cause `HitRect`\n *  |  +--------------------+  |   to become the responder.\n *  |  |  +--------------+  |  | - `HitRect` is typically expanded around\n *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.\n *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,\n *  |  |  |              |  |  |   and before letting up, the Visual React\n *  |  |  +--------------+  |  |   will become \"active\". This makes it eligible\n *  |  |     HitRect        |  |   for being highlighted (so long as the\n *  |  +--------------------+  |   press remains in the `PressRect`).\n *  |        PressRect     o   |\n *  +----------------------|---+\n *           Out Region    |\n *                         +-----+ This gap between the `HitRect` and\n *                                 `PressRect` allows a touch to move far away\n *                                 from the original hit rect, and remain\n *                                 highlighted, and eligible for a \"Press\".\n *                                 Customize this via\n *                                 `touchableGetPressRectOffset()`.\n *\n *\n *\n * ======= State Machine =======\n *\n * +-------------+ <---+ RESPONDER_RELEASE\n * |NOT_RESPONDER|\n * +-------------+ <---+ RESPONDER_TERMINATED\n *     +\n *     | RESPONDER_GRANT (HitRect)\n *     v\n * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+\n * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|\n * +---------------------------+          +-------------------------+                +------------------------------+\n *     +            ^                         +           ^                                 +           ^\n *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_\n *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT\n *     |            |                         |           |                                 |           |\n *     v            +                         v           +                                 v           +\n * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+\n * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|\n * +----------------------------+         +--------------------------+               +-------------------------------+\n *\n * T + DELAY => LONG_PRESS_DELAY_MS + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the `touchableHandlePress` abstract method invocation that occurs\n * when a responder is released while in either of the \"Press\" states.\n *\n * The other important side effects are the highlight abstract method\n * invocations (internal callbacks) to be implemented by the mixer.\n *\n *\n * @lends Touchable.prototype\n */\nvar TouchableMixin = {\n  // HACK (part 1): basic support for touchable interactions using a keyboard\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    this._touchableNode = findNodeHandle(this);\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableBlurListener = function (e) {\n        if (_this._isTouchableKeyboardActive) {\n          if (_this.state.touchable.touchState && _this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            _this.touchableHandleResponderTerminate({ nativeEvent: e });\n          }\n          _this._isTouchableKeyboardActive = false;\n        }\n      };\n      this._touchableNode.addEventListener('blur', this._touchableBlurListener);\n    }\n  },\n\n  /**\n   * Clear all timeouts on unmount\n   */\n  componentWillUnmount: function componentWillUnmount() {\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableNode.removeEventListener('blur', this._touchableBlurListener);\n    }\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n\n  /**\n   * It's prefer that mixins determine state in this way, having the class\n   * explicitly mix the state in the one and only `getInitialState` method.\n   *\n   * @return {object} State object to be placed inside of\n   * `this.state.touchable`.\n   */\n  touchableGetInitialState: function touchableGetInitialState() {\n    return {\n      touchable: { touchState: undefined, responderID: null }\n    };\n  },\n\n  // ==== Hooks to Gesture Responder system ====\n  /**\n   * Must return true if embedded in a native platform scroll view.\n   */\n  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {\n    return !this.props.rejectResponderTermination;\n  },\n\n  /**\n   * Must return true to start the process of `Touchable`.\n   */\n  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {\n    return !this.props.disabled;\n  },\n\n  /**\n   * Return true to cancel press on long press.\n   */\n  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {\n    return true;\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderGrant` event.\n   */\n  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {\n    var dispatchID = e.currentTarget;\n    // Since e is used in a callback invoked on another event loop\n    // (as in setTimeout etc), we need to call e.persist() on the\n    // event to make sure it doesn't get reused in the event object pool.\n    e.persist();\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);\n    } else {\n      this.state.touchable.positionOnActivate = null;\n      this._handleDelay(e);\n    }\n\n    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderRelease` event.\n   */\n  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderTerminate` event.\n   */\n  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderMove` event.\n   */\n  touchableHandleResponderMove: function touchableHandleResponderMove(e) {\n    // Not enough time elapsed yet, wait for highlight -\n    // this is just a perf optimization.\n    if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {\n      return;\n    }\n\n    // Measurement may not have returned yet.\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    var positionOnActivate = this.state.touchable.positionOnActivate;\n    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {\n      left: PRESS_EXPAND_PX,\n      right: PRESS_EXPAND_PX,\n      top: PRESS_EXPAND_PX,\n      bottom: PRESS_EXPAND_PX\n    };\n\n    var pressExpandLeft = pressRectOffset.left;\n    var pressExpandTop = pressRectOffset.top;\n    var pressExpandRight = pressRectOffset.right;\n    var pressExpandBottom = pressRectOffset.bottom;\n\n    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left;\n      pressExpandTop += hitSlop.top;\n      pressExpandRight += hitSlop.right;\n      pressExpandBottom += hitSlop.bottom;\n    }\n\n    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;\n    if (isTouchWithinActive) {\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n      var curState = this.state.touchable.touchState;\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {\n        // fix for t7967420\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n\n  // ==== Abstract Application Callbacks ====\n\n  /**\n   * Invoked when the item should be highlighted. Mixers should implement this\n   * to visually distinguish the `VisualRect` so that the user knows that\n   * releasing a touch will result in a \"selection\" (analog to click).\n   *\n   * @abstract\n   * touchableHandleActivePressIn: function,\n   */\n\n  /**\n   * Invoked when the item is \"active\" (in that it is still eligible to become\n   * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\n   * want to unhighlight the `VisualRect`. If the user (while pressing) moves\n   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\n   * again and the mixer should probably highlight the `VisualRect` again. This\n   * event will not fire on an `touchEnd/mouseUp` event, only move events while\n   * the user is depressing the mouse/touch.\n   *\n   * @abstract\n   * touchableHandleActivePressOut: function\n   */\n\n  /**\n   * Invoked when the item is \"selected\" - meaning the interaction ended by\n   * letting up while the item was either in the state\n   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\n   *\n   * @abstract\n   * touchableHandlePress: function\n   */\n\n  /**\n   * Invoked when the item is long pressed - meaning the interaction ended by\n   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\n   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\n   * be called as it normally is. If `touchableHandleLongPress` is provided, by\n   * default any `touchableHandlePress` callback will not be invoked. To\n   * override this default behavior, override `touchableLongPressCancelsPress`\n   * to return false. As a result, `touchableHandlePress` will be called when\n   * lifting up, even if `touchableHandleLongPress` has also been called.\n   *\n   * @abstract\n   * touchableHandleLongPress: function\n   */\n\n  /**\n   * Returns the number of millis to wait before triggering a highlight.\n   *\n   * @abstract\n   * touchableGetHighlightDelayMS: function\n   */\n\n  /**\n   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive\n   * numbers mean the size expands outwards.\n   *\n   * @abstract\n   * touchableGetPressRectOffset: function\n   */\n\n  // ==== Internal Logic ====\n\n  /**\n   * Measures the `HitRect` node on activation. The Bounding rectangle is with\n   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`\n   * should result in points that are in the same coordinate system as an\n   * event's `globalX/globalY` data values.\n   *\n   * - Consider caching this for the lifetime of the component, or possibly\n   *   being able to share this cache between any `ScrollMap` view.\n   *\n   * @sideeffects\n   * @private\n   */\n  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {\n    var tag = this.state.touchable.responderID;\n    if (tag == null) {\n      return;\n    }\n\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n\n  _handleQueryLayout: function _handleQueryLayout(x, y, width, height, globalX, globalY) {\n    // don't do anything if UIManager failed to measure node\n    if (!x && !y && !width && !height && !globalX && !globalY) {\n      return;\n    }\n    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate &&\n    // $FlowFixMe\n    BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);\n    // $FlowFixMe\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(width, height);\n  },\n\n  _handleDelay: function _handleDelay(e) {\n    this.touchableDelayTimeout = null;\n    this._receiveSignal(Signals.DELAY, e);\n  },\n\n  _handleLongDelay: function _handleLongDelay(e) {\n    this.longPressDelayTimeout = null;\n    var curState = this.state.touchable.touchState;\n    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {\n      console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   *\n   * @param {Signals} signal State machine signal.\n   * @throws Error if invalid state transition or unrecognized signal.\n   * @sideeffects\n   */\n  _receiveSignal: function _receiveSignal(signal, e) {\n    var responderID = this.state.touchable.responderID;\n    var curState = this.state.touchable.touchState;\n    var nextState = Transitions[curState] && Transitions[curState][signal];\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n    if (!nextState) {\n      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');\n    }\n    if (nextState === States.ERROR) {\n      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');\n    }\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n      this.state.touchable.touchState = nextState;\n    }\n  },\n\n  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n\n  _isHighlight: function _isHighlight(state) {\n    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;\n  },\n\n  _savePressInLocation: function _savePressInLocation(e) {\n    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n    this.pressInLocation = {\n      pageX: pageX,\n      pageY: pageY,\n      get locationX() {\n        return touch && touch.locationX;\n      },\n      get locationY() {\n        return touch && touch.locationY;\n      }\n    };\n  },\n\n  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {\n    var deltaX = aX - bX;\n    var deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n\n  /**\n   * Will perform a transition between touchable states, and identify any\n   * highlighting or unhighlighting that must be performed for this particular\n   * transition.\n   *\n   * @param {States} curState Current Touchable state.\n   * @param {States} nextState Next Touchable state.\n   * @param {Signal} signal Signal that triggered the transition.\n   * @param {Event} e Native event.\n   * @sideeffects\n   */\n  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {\n    var curIsHighlight = this._isHighlight(curState);\n    var newIsHighlight = this._isHighlight(nextState);\n\n    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    if (!IsActive[curState] && IsActive[nextState]) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      var hasLongPressHandler = !!this.props.onLongPress;\n      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && ( // We *are* long pressing..\n      !hasLongPressHandler || // But either has no long handler\n      !this.touchableLongPressCancelsPress()); // or we're told to ignore it.\n\n      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          // we never highlighted because of delay, but we should highlight now\n          this._startHighlight(e);\n          this._endHighlight(e);\n        }\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n\n  _startHighlight: function _startHighlight(e) {\n    this._savePressInLocation(e);\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n\n  _endHighlight: function _endHighlight(e) {\n    var _this2 = this;\n\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(function () {\n          _this2.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n\n  // HACK (part 2): basic support for touchable interactions using a keyboard (including\n  // delays and longPress)\n  touchableHandleKeyEvent: function touchableHandleKeyEvent(e) {\n    var ENTER = 13;\n    var SPACE = 32;\n    var type = e.type,\n        which = e.which;\n\n    if (which === ENTER || which === SPACE) {\n      if (type === 'keydown') {\n        if (!this._isTouchableKeyboardActive) {\n          if (!this.state.touchable.touchState || this.state.touchable.touchState === States.NOT_RESPONDER) {\n            this.touchableHandleResponderGrant(e);\n            this._isTouchableKeyboardActive = true;\n          }\n        }\n      } else if (type === 'keyup') {\n        if (this._isTouchableKeyboardActive) {\n          if (this.state.touchable.touchState && this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            this.touchableHandleResponderRelease(e);\n            this._isTouchableKeyboardActive = false;\n          }\n        }\n      }\n      e.stopPropagation();\n      // prevent the default behaviour unless the Touchable functions as a link\n      // and Enter is pressed\n      if (!(which === ENTER && AccessibilityUtil.propsToAriaRole(this.props) === 'link')) {\n        e.preventDefault();\n      }\n    }\n  }\n};\n\nvar Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false, // Highlights all touchable targets. Toggle with Inspector.\n  /**\n   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).\n   */\n  renderDebugView: function renderDebugView(_ref) {\n    var color = _ref.color,\n        hitSlop = _ref.hitSlop;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Touchable.TOUCH_TARGET_DEBUG) {\n        return null;\n      }\n      var debugHitSlopStyle = {};\n      hitSlop = hitSlop || { top: 0, bottom: 0, left: 0, right: 0 };\n      for (var key in hitSlop) {\n        debugHitSlopStyle[key] = -hitSlop[key];\n      }\n      var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);\n      return React.createElement(View, {\n        pointerEvents: 'none',\n        style: Object.assign({\n          position: 'absolute',\n          borderColor: hexColor.slice(0, -2) + '55', // More opaque\n          borderWidth: 1,\n          borderStyle: 'dashed',\n          backgroundColor: hexColor.slice(0, -2) + '0F' }, debugHitSlopStyle)\n      });\n    }\n  }\n};\n\nexport default Touchable;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
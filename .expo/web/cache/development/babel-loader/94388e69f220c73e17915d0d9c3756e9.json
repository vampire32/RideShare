{"ast":null,"code":"import processColor from \"react-native-web/dist/exports/processColor\";\n\nvar isWebColor = function isWebColor(color) {\n  return color === 'currentcolor' || color === 'currentColor' || color === 'inherit' || color.indexOf('var(') === 0;\n};\n\nexport function normalizeColor(color) {\n  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  if (color == null) return;\n\n  if (typeof color === 'string' && isWebColor(color)) {\n    return color;\n  }\n\n  var colorInt = processColor(color);\n\n  if (colorInt != null) {\n    var r = colorInt >> 16 & 255;\n    var g = colorInt >> 8 & 255;\n    var b = colorInt & 255;\n    var a = (colorInt >> 24 & 255) / 255;\n    var alpha = (a * opacity).toFixed(2);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + alpha + \")\";\n  }\n}","map":{"version":3,"sources":["../src/normalizeColor.ts"],"names":[],"mappings":";;AASA,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,KAAD;EAAA,OACjB,KAAK,KAAK,cAAV,IACA,KAAK,KAAK,cADV,IAEA,KAAK,KAAK,SAFV,IAGA,KAAK,CAAC,OAAN,CAAc,MAAd,MAA0B,CAJT;AAAA,CAAnB;;AAMA,OAAM,SAAU,cAAV,CAAyB,KAAzB,EAAqE;EAAA,IAAnB,OAAmB,uEAAD,CAAC;EACzE,IAAI,KAAK,IAAI,IAAb,EAAmB;;EAEnB,IAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,UAAU,CAAC,KAAD,CAA3C,EAAoD;IAClD,OAAO,KAAP;EACD;;EAED,IAAM,QAAQ,GAAG,YAAY,CAAC,KAAD,CAA7B;;EACA,IAAI,QAAQ,IAAI,IAAhB,EAAsB;IACpB,IAAM,CAAC,GAAI,QAAQ,IAAI,EAAb,GAAmB,GAA7B;IACA,IAAM,CAAC,GAAI,QAAQ,IAAI,CAAb,GAAkB,GAA5B;IACA,IAAM,CAAC,GAAG,QAAQ,GAAG,GAArB;IACA,IAAM,CAAC,GAAG,CAAE,QAAQ,IAAI,EAAb,GAAmB,GAApB,IAA2B,GAArC;IACA,IAAM,KAAK,GAAG,CAAC,CAAC,GAAG,OAAL,EAAc,OAAd,CAAsB,CAAtB,CAAd;IACA,iBAAe,CAAf,SAAoB,CAApB,SAAyB,CAAzB,SAA8B,KAA9B;EACD;AACF","sourcesContent":["/**\n * Copyright (c) Expo.\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { processColor } from 'react-native';\n\nconst isWebColor = (color: string): boolean =>\n  color === 'currentcolor' ||\n  color === 'currentColor' ||\n  color === 'inherit' ||\n  color.indexOf('var(') === 0;\n\nexport function normalizeColor(color?: number | string, opacity: number = 1): void | string {\n  if (color == null) return;\n\n  if (typeof color === 'string' && isWebColor(color)) {\n    return color;\n  }\n\n  const colorInt = processColor(color) as number | undefined;\n  if (colorInt != null) {\n    const r = (colorInt >> 16) & 255;\n    const g = (colorInt >> 8) & 255;\n    const b = colorInt & 255;\n    const a = ((colorInt >> 24) & 255) / 255;\n    const alpha = (a * opacity).toFixed(2);\n    return `rgba(${r},${g},${b},${alpha})`;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport ListViewDataSource from \"./ListViewDataSource\";\nimport Platform from \"../../../exports/Platform\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport findNodeHandle from \"../../../exports/findNodeHandle\";\nimport NativeModules from \"../../../exports/NativeModules\";\nimport ScrollView from \"../../../exports/ScrollView\";\nimport ScrollResponder from \"../../../modules/ScrollResponder\";\nimport StaticRenderer from \"../StaticRenderer\";\nimport TimerMixin from 'react-timer-mixin';\nimport View from \"../../../exports/View\";\nimport cloneReferencedElement from \"./cloneReferencedElement\";\nimport createReactClass from 'create-react-class';\nimport isEmpty from \"../isEmpty\";\n\nvar merge = function merge() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return Object.assign.apply(Object, [{}].concat(args));\n};\n\nvar RCTScrollViewManager = NativeModules.ScrollViewManager;\nvar DEFAULT_PAGE_SIZE = 1;\nvar DEFAULT_INITIAL_ROWS = 10;\nvar DEFAULT_SCROLL_RENDER_AHEAD = 1000;\nvar DEFAULT_END_REACHED_THRESHOLD = 1000;\nvar DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;\nvar ListView = createReactClass({\n  displayName: 'ListView',\n  _childFrames: [],\n  _sentEndForContentLength: null,\n  _scrollComponent: null,\n  _prevRenderedRowsCount: 0,\n  _visibleRows: {},\n  scrollProperties: {},\n  mixins: [ScrollResponder.Mixin, TimerMixin],\n  statics: {\n    DataSource: ListViewDataSource\n  },\n  propTypes: _extends({}, ScrollView.propTypes, {\n    dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,\n    renderSeparator: PropTypes.func,\n    renderRow: PropTypes.func.isRequired,\n    initialListSize: PropTypes.number.isRequired,\n    onEndReached: PropTypes.func,\n    onEndReachedThreshold: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired,\n    renderFooter: PropTypes.func,\n    renderHeader: PropTypes.func,\n    renderSectionHeader: PropTypes.func,\n    renderScrollComponent: PropTypes.func.isRequired,\n    scrollRenderAheadDistance: PropTypes.number.isRequired,\n    onChangeVisibleRows: PropTypes.func,\n    removeClippedSubviews: PropTypes.bool,\n    stickySectionHeadersEnabled: PropTypes.bool,\n    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,\n    enableEmptySections: PropTypes.bool\n  }),\n  getMetrics: function getMetrics() {\n    return {\n      contentLength: this.scrollProperties.contentLength,\n      totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),\n      renderedRows: this.state.curRenderedRowsCount,\n      visibleRows: Object.keys(this._visibleRows).length\n    };\n  },\n  getScrollResponder: function getScrollResponder() {\n    if (this._scrollComponent && this._scrollComponent.getScrollResponder) {\n      return this._scrollComponent.getScrollResponder();\n    }\n  },\n  getScrollableNode: function getScrollableNode() {\n    if (this._scrollComponent && this._scrollComponent.getScrollableNode) {\n      return this._scrollComponent.getScrollableNode();\n    } else {\n      return findNodeHandle(this._scrollComponent);\n    }\n  },\n  scrollTo: function scrollTo() {\n    if (this._scrollComponent && this._scrollComponent.scrollTo) {\n      var _scrollComponent;\n\n      (_scrollComponent = this._scrollComponent).scrollTo.apply(_scrollComponent, arguments);\n    }\n  },\n  scrollToEnd: function scrollToEnd(options) {\n    if (this._scrollComponent) {\n      if (this._scrollComponent.scrollToEnd) {\n        this._scrollComponent.scrollToEnd(options);\n      } else {\n        console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');\n      }\n    }\n  },\n  flashScrollIndicators: function flashScrollIndicators() {\n    if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {\n      this._scrollComponent.flashScrollIndicators();\n    }\n  },\n  setNativeProps: function setNativeProps(props) {\n    if (this._scrollComponent) {\n      this._scrollComponent.setNativeProps(props);\n    }\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      initialListSize: DEFAULT_INITIAL_ROWS,\n      pageSize: DEFAULT_PAGE_SIZE,\n      renderScrollComponent: function renderScrollComponent(props) {\n        return React.createElement(ScrollView, props);\n      },\n      scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,\n      onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,\n      stickySectionHeadersEnabled: Platform.OS === 'ios' || Platform.OS === 'web',\n      stickyHeaderIndices: []\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      curRenderedRowsCount: this.props.initialListSize,\n      highlightedRow: {}\n    };\n  },\n  getInnerViewNode: function getInnerViewNode() {\n    return this._scrollComponent.getInnerViewNode();\n  },\n  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {\n    this.scrollProperties = {\n      visibleLength: null,\n      contentLength: null,\n      offset: 0\n    };\n    this._childFrames = [];\n    this._visibleRows = {};\n    this._prevRenderedRowsCount = 0;\n    this._sentEndForContentLength = null;\n  },\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    this.requestAnimationFrame(function () {\n      _this._measureAndUpdateScrollProps();\n    });\n  },\n  UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {\n      this.setState(function (state, props) {\n        _this2._prevRenderedRowsCount = 0;\n        return {\n          curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())\n        };\n      }, function () {\n        return _this2._renderMoreRowsIfNeeded();\n      });\n    }\n  },\n  componentDidUpdate: function componentDidUpdate() {\n    var _this3 = this;\n\n    this.requestAnimationFrame(function () {\n      _this3._measureAndUpdateScrollProps();\n    });\n  },\n  _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {\n    this.setState({\n      highlightedRow: {\n        sectionID: sectionID,\n        rowID: rowID\n      }\n    });\n  },\n  render: function render() {\n    var bodyComponents = [];\n    var dataSource = this.props.dataSource;\n    var allRowIDs = dataSource.rowIdentities;\n    var rowCount = 0;\n    var stickySectionHeaderIndices = [];\n    var renderSectionHeader = this.props.renderSectionHeader;\n    var header = this.props.renderHeader && this.props.renderHeader();\n    var footer = this.props.renderFooter && this.props.renderFooter();\n    var totalIndex = header ? 1 : 0;\n\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\n      var rowIDs = allRowIDs[sectionIdx];\n\n      if (rowIDs.length === 0) {\n        if (this.props.enableEmptySections === undefined) {\n          var warning = require('fbjs/lib/warning');\n\n          warning(false, 'In next release empty section headers will be rendered.' + \" In this release you can use 'enableEmptySections' flag to render empty section headers.\");\n          continue;\n        } else {\n          var invariant = require('fbjs/lib/invariant');\n\n          invariant(this.props.enableEmptySections, \"In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered.\" + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + \" In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.\");\n        }\n      }\n\n      if (renderSectionHeader) {\n        var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);\n\n        if (element) {\n          bodyComponents.push(React.cloneElement(element, {\n            key: 's_' + sectionID\n          }));\n\n          if (this.props.stickySectionHeadersEnabled) {\n            stickySectionHeaderIndices.push(totalIndex);\n          }\n\n          totalIndex++;\n        }\n      }\n\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        var rowID = rowIDs[rowIdx];\n        var comboID = sectionID + '_' + rowID;\n        var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);\n        var row = React.createElement(StaticRenderer, {\n          key: 'r_' + comboID,\n          shouldUpdate: !!shouldUpdateRow,\n          render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted)\n        });\n        bodyComponents.push(row);\n        totalIndex++;\n\n        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {\n          var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);\n          var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);\n\n          if (separator) {\n            bodyComponents.push(React.createElement(View, {\n              key: 's_' + comboID\n            }, separator));\n            totalIndex++;\n          }\n        }\n\n        if (++rowCount === this.state.curRenderedRowsCount) {\n          break;\n        }\n      }\n\n      if (rowCount >= this.state.curRenderedRowsCount) {\n        break;\n      }\n    }\n\n    var _props = this.props,\n        renderScrollComponent = _props.renderScrollComponent,\n        props = _objectWithoutProperties(_props, ['renderScrollComponent']);\n\n    if (!props.scrollEventThrottle) {\n      props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;\n    }\n\n    if (props.removeClippedSubviews === undefined) {\n      props.removeClippedSubviews = true;\n    }\n\n    _extends(props, {\n      onScroll: this._onScroll,\n      stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),\n      onKeyboardWillShow: undefined,\n      onKeyboardWillHide: undefined,\n      onKeyboardDidShow: undefined,\n      onKeyboardDidHide: undefined\n    });\n\n    return cloneReferencedElement(renderScrollComponent(props), {\n      ref: this._setScrollComponentRef,\n      onContentSizeChange: this._onContentSizeChange,\n      onLayout: this._onLayout,\n      DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined\n    }, header, bodyComponents, footer);\n  },\n  _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {\n    var scrollComponent = this.getScrollResponder();\n\n    if (!scrollComponent || !scrollComponent.getInnerViewNode) {\n      return;\n    }\n\n    RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(findNodeHandle(scrollComponent), this._updateVisibleRows);\n  },\n  _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {\n    this._scrollComponent = scrollComponent;\n  },\n  _onContentSizeChange: function _onContentSizeChange(width, height) {\n    var contentLength = !this.props.horizontal ? height : width;\n\n    if (contentLength !== this.scrollProperties.contentLength) {\n      this.scrollProperties.contentLength = contentLength;\n\n      this._updateVisibleRows();\n\n      this._renderMoreRowsIfNeeded();\n    }\n\n    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);\n  },\n  _onLayout: function _onLayout(event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n        width = _event$nativeEvent$la.width,\n        height = _event$nativeEvent$la.height;\n    var visibleLength = !this.props.horizontal ? height : width;\n\n    if (visibleLength !== this.scrollProperties.visibleLength) {\n      this.scrollProperties.visibleLength = visibleLength;\n\n      this._updateVisibleRows();\n\n      this._renderMoreRowsIfNeeded();\n    }\n\n    this.props.onLayout && this.props.onLayout(event);\n  },\n  _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {\n    if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {\n      this._sentEndForContentLength = this.scrollProperties.contentLength;\n      this.props.onEndReached(event);\n      return true;\n    }\n\n    return false;\n  },\n  _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {\n    if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {\n      this._maybeCallOnEndReached();\n\n      return;\n    }\n\n    var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);\n\n    if (distanceFromEnd < this.props.scrollRenderAheadDistance) {\n      this._pageInNewRows();\n    }\n  },\n  _pageInNewRows: function _pageInNewRows() {\n    var _this4 = this;\n\n    this.setState(function (state, props) {\n      var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());\n      _this4._prevRenderedRowsCount = state.curRenderedRowsCount;\n      return {\n        curRenderedRowsCount: rowsToRender\n      };\n    }, function () {\n      _this4._measureAndUpdateScrollProps();\n\n      _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;\n    });\n  },\n  _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {\n    return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;\n  },\n  _updateVisibleRows: function _updateVisibleRows(updatedFrames) {\n    var _this5 = this;\n\n    if (!this.props.onChangeVisibleRows) {\n      return;\n    }\n\n    if (updatedFrames) {\n      updatedFrames.forEach(function (newFrame) {\n        _this5._childFrames[newFrame.index] = merge(newFrame);\n      });\n    }\n\n    var isVertical = !this.props.horizontal;\n    var dataSource = this.props.dataSource;\n    var visibleMin = this.scrollProperties.offset;\n    var visibleMax = visibleMin + this.scrollProperties.visibleLength;\n    var allRowIDs = dataSource.rowIdentities;\n    var header = this.props.renderHeader && this.props.renderHeader();\n    var totalIndex = header ? 1 : 0;\n    var visibilityChanged = false;\n    var changedRows = {};\n\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var rowIDs = allRowIDs[sectionIdx];\n\n      if (rowIDs.length === 0) {\n        continue;\n      }\n\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\n\n      if (this.props.renderSectionHeader) {\n        totalIndex++;\n      }\n\n      var visibleSection = this._visibleRows[sectionID];\n\n      if (!visibleSection) {\n        visibleSection = {};\n      }\n\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        var rowID = rowIDs[rowIdx];\n        var frame = this._childFrames[totalIndex];\n        totalIndex++;\n\n        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {\n          totalIndex++;\n        }\n\n        if (!frame) {\n          break;\n        }\n\n        var rowVisible = visibleSection[rowID];\n        var min = isVertical ? frame.y : frame.x;\n        var max = min + (isVertical ? frame.height : frame.width);\n\n        if (!min && !max || min === max) {\n          break;\n        }\n\n        if (min > visibleMax || max < visibleMin) {\n          if (rowVisible) {\n            visibilityChanged = true;\n            delete visibleSection[rowID];\n\n            if (!changedRows[sectionID]) {\n              changedRows[sectionID] = {};\n            }\n\n            changedRows[sectionID][rowID] = false;\n          }\n        } else if (!rowVisible) {\n          visibilityChanged = true;\n          visibleSection[rowID] = true;\n\n          if (!changedRows[sectionID]) {\n            changedRows[sectionID] = {};\n          }\n\n          changedRows[sectionID][rowID] = true;\n        }\n      }\n\n      if (!isEmpty(visibleSection)) {\n        this._visibleRows[sectionID] = visibleSection;\n      } else if (this._visibleRows[sectionID]) {\n        delete this._visibleRows[sectionID];\n      }\n    }\n\n    visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);\n  },\n  _onScroll: function _onScroll(e) {\n    var isVertical = !this.props.horizontal;\n    this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];\n    this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];\n    this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];\n\n    this._updateVisibleRows(e.nativeEvent.updatedChildFrames);\n\n    if (!this._maybeCallOnEndReached(e)) {\n      this._renderMoreRowsIfNeeded();\n    }\n\n    if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {\n      this._sentEndForContentLength = null;\n    }\n\n    this.props.onScroll && this.props.onScroll(e);\n  }\n});\nexport default ListView;","map":{"version":3,"names":["_objectWithoutProperties","obj","keys","target","i","indexOf","Object","prototype","hasOwnProperty","call","ListViewDataSource","Platform","React","PropTypes","findNodeHandle","NativeModules","ScrollView","ScrollResponder","StaticRenderer","TimerMixin","View","cloneReferencedElement","createReactClass","isEmpty","merge","_len","arguments","length","args","Array","_key","assign","apply","concat","RCTScrollViewManager","ScrollViewManager","DEFAULT_PAGE_SIZE","DEFAULT_INITIAL_ROWS","DEFAULT_SCROLL_RENDER_AHEAD","DEFAULT_END_REACHED_THRESHOLD","DEFAULT_SCROLL_CALLBACK_THROTTLE","ListView","displayName","_childFrames","_sentEndForContentLength","_scrollComponent","_prevRenderedRowsCount","_visibleRows","scrollProperties","mixins","Mixin","statics","DataSource","propTypes","dataSource","instanceOf","isRequired","renderSeparator","func","renderRow","initialListSize","number","onEndReached","onEndReachedThreshold","pageSize","renderFooter","renderHeader","renderSectionHeader","renderScrollComponent","scrollRenderAheadDistance","onChangeVisibleRows","removeClippedSubviews","bool","stickySectionHeadersEnabled","stickyHeaderIndices","arrayOf","enableEmptySections","getMetrics","contentLength","totalRows","props","getRowAndSectionCount","getRowCount","renderedRows","state","curRenderedRowsCount","visibleRows","getScrollResponder","getScrollableNode","scrollTo","scrollToEnd","options","console","warn","flashScrollIndicators","setNativeProps","getDefaultProps","createElement","OS","getInitialState","highlightedRow","getInnerViewNode","UNSAFE_componentWillMount","visibleLength","offset","componentDidMount","_this","requestAnimationFrame","_measureAndUpdateScrollProps","UNSAFE_componentWillReceiveProps","nextProps","_this2","setState","Math","min","max","_renderMoreRowsIfNeeded","componentDidUpdate","_this3","_onRowHighlighted","sectionID","rowID","render","bodyComponents","allRowIDs","rowIdentities","rowCount","stickySectionHeaderIndices","header","footer","totalIndex","sectionIdx","sectionIdentities","rowIDs","undefined","warning","require","invariant","element","getSectionHeaderData","push","cloneElement","key","rowIdx","comboID","shouldUpdateRow","rowShouldUpdate","row","shouldUpdate","bind","getRowData","adjacentRowHighlighted","separator","_props","scrollEventThrottle","onScroll","_onScroll","onKeyboardWillShow","onKeyboardWillHide","onKeyboardDidShow","onKeyboardDidHide","ref","_setScrollComponentRef","onContentSizeChange","_onContentSizeChange","onLayout","_onLayout","DEPRECATED_sendUpdatedChildFrames","scrollComponent","calculateChildFrames","_updateVisibleRows","width","height","horizontal","event","_event$nativeEvent$la","nativeEvent","layout","_maybeCallOnEndReached","_getDistanceFromEnd","distanceFromEnd","_pageInNewRows","_this4","rowsToRender","updatedFrames","_this5","forEach","newFrame","index","isVertical","visibleMin","visibleMax","visibilityChanged","changedRows","visibleSection","frame","rowVisible","y","x","e","layoutMeasurement","contentSize","contentOffset","updatedChildFrames"],"sources":["D:/React/TaxiApp/cabApp/node_modules/react-native-phone-number-input/node_modules/react-native-web/dist/vendor/react-native/ListView/index.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule ListView\n * \n * @format\n */\n'use strict';\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nimport ListViewDataSource from './ListViewDataSource';\nimport Platform from '../../../exports/Platform';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport findNodeHandle from '../../../exports/findNodeHandle';\nimport NativeModules from '../../../exports/NativeModules';\nimport ScrollView from '../../../exports/ScrollView';\nimport ScrollResponder from '../../../modules/ScrollResponder';\nimport StaticRenderer from '../StaticRenderer';\nimport TimerMixin from 'react-timer-mixin';\nimport View from '../../../exports/View';\n\nimport cloneReferencedElement from './cloneReferencedElement';\nimport createReactClass from 'create-react-class';\nimport isEmpty from '../isEmpty';\n\nvar merge = function merge() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return Object.assign.apply(Object, [{}].concat(args));\n};\nvar RCTScrollViewManager = NativeModules.ScrollViewManager;\n\nvar DEFAULT_PAGE_SIZE = 1;\nvar DEFAULT_INITIAL_ROWS = 10;\nvar DEFAULT_SCROLL_RENDER_AHEAD = 1000;\nvar DEFAULT_END_REACHED_THRESHOLD = 1000;\nvar DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;\n\n/**\n * DEPRECATED - use one of the new list components, such as [`FlatList`](docs/flatlist.html)\n * or [`SectionList`](docs/sectionlist.html) for bounded memory use, fewer bugs,\n * better performance, an easier to use API, and more features. Check out this\n * [blog post](https://facebook.github.io/react-native/blog/2017/03/13/better-list-views.html)\n * for more details.\n *\n * ListView - A core component designed for efficient display of vertically\n * scrolling lists of changing data. The minimal API is to create a\n * [`ListView.DataSource`](docs/listviewdatasource.html), populate it with a simple\n * array of data blobs, and instantiate a `ListView` component with that data\n * source and a `renderRow` callback which takes a blob from the data array and\n * returns a renderable component.\n *\n * Minimal example:\n *\n * ```\n * class MyComponent extends Component {\n *   constructor() {\n *     super();\n *     const ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n *     this.state = {\n *       dataSource: ds.cloneWithRows(['row 1', 'row 2']),\n *     };\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         dataSource={this.state.dataSource}\n *         renderRow={(rowData) => <Text>{rowData}</Text>}\n *       />\n *     );\n *   }\n * }\n * ```\n *\n * ListView also supports more advanced features, including sections with sticky\n * section headers, header and footer support, callbacks on reaching the end of\n * the available data (`onEndReached`) and on the set of rows that are visible\n * in the device viewport change (`onChangeVisibleRows`), and several\n * performance optimizations.\n *\n * There are a few performance operations designed to make ListView scroll\n * smoothly while dynamically loading potentially very large (or conceptually\n * infinite) data sets:\n *\n *  * Only re-render changed rows - the rowHasChanged function provided to the\n *    data source tells the ListView if it needs to re-render a row because the\n *    source data has changed - see ListViewDataSource for more details.\n *\n *  * Rate-limited row rendering - By default, only one row is rendered per\n *    event-loop (customizable with the `pageSize` prop). This breaks up the\n *    work into smaller chunks to reduce the chance of dropping frames while\n *    rendering rows.\n */\n\nvar ListView = createReactClass({\n  displayName: 'ListView',\n  _childFrames: [],\n  _sentEndForContentLength: null,\n  _scrollComponent: null,\n  _prevRenderedRowsCount: 0,\n  _visibleRows: {},\n  scrollProperties: {},\n\n  mixins: [ScrollResponder.Mixin, TimerMixin],\n\n  statics: {\n    DataSource: ListViewDataSource\n  },\n\n  /**\n   * You must provide a renderRow function. If you omit any of the other render\n   * functions, ListView will simply skip rendering them.\n   *\n   * - renderRow(rowData, sectionID, rowID, highlightRow);\n   * - renderSectionHeader(sectionData, sectionID);\n   */\n  propTypes: Object.assign({}, ScrollView.propTypes, {\n    /**\n     * An instance of [ListView.DataSource](docs/listviewdatasource.html) to use\n     */\n    dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,\n    /**\n     * (sectionID, rowID, adjacentRowHighlighted) => renderable\n     *\n     * If provided, a renderable component to be rendered as the separator\n     * below each row but not the last row if there is a section header below.\n     * Take a sectionID and rowID of the row above and whether its adjacent row\n     * is highlighted.\n     */\n    renderSeparator: PropTypes.func,\n    /**\n     * (rowData, sectionID, rowID, highlightRow) => renderable\n     *\n     * Takes a data entry from the data source and its ids and should return\n     * a renderable component to be rendered as the row. By default the data\n     * is exactly what was put into the data source, but it's also possible to\n     * provide custom extractors. ListView can be notified when a row is\n     * being highlighted by calling `highlightRow(sectionID, rowID)`. This\n     * sets a boolean value of adjacentRowHighlighted in renderSeparator, allowing you\n     * to control the separators above and below the highlighted row. The highlighted\n     * state of a row can be reset by calling highlightRow(null).\n     */\n    renderRow: PropTypes.func.isRequired,\n    /**\n     * How many rows to render on initial component mount. Use this to make\n     * it so that the first screen worth of data appears at one time instead of\n     * over the course of multiple frames.\n     */\n    initialListSize: PropTypes.number.isRequired,\n    /**\n     * Called when all rows have been rendered and the list has been scrolled\n     * to within onEndReachedThreshold of the bottom. The native scroll\n     * event is provided.\n     */\n    onEndReached: PropTypes.func,\n    /**\n     * Threshold in pixels (virtual, not physical) for calling onEndReached.\n     */\n    onEndReachedThreshold: PropTypes.number.isRequired,\n    /**\n     * Number of rows to render per event loop. Note: if your 'rows' are actually\n     * cells, i.e. they don't span the full width of your view (as in the\n     * ListViewGridLayoutExample), you should set the pageSize to be a multiple\n     * of the number of cells per row, otherwise you're likely to see gaps at\n     * the edge of the ListView as new pages are loaded.\n     */\n    pageSize: PropTypes.number.isRequired,\n    /**\n     * () => renderable\n     *\n     * The header and footer are always rendered (if these props are provided)\n     * on every render pass. If they are expensive to re-render, wrap them\n     * in StaticContainer or other mechanism as appropriate. Footer is always\n     * at the bottom of the list, and header at the top, on every render pass.\n     * In a horizontal ListView, the header is rendered on the left and the\n     * footer on the right.\n     */\n    renderFooter: PropTypes.func,\n    renderHeader: PropTypes.func,\n    /**\n     * (sectionData, sectionID) => renderable\n     *\n     * If provided, a header is rendered for this section.\n     */\n    renderSectionHeader: PropTypes.func,\n    /**\n     * (props) => renderable\n     *\n     * A function that returns the scrollable component in which the list rows\n     * are rendered. Defaults to returning a ScrollView with the given props.\n     */\n    renderScrollComponent: PropTypes.func.isRequired,\n    /**\n     * How early to start rendering rows before they come on screen, in\n     * pixels.\n     */\n    scrollRenderAheadDistance: PropTypes.number.isRequired,\n    /**\n     * (visibleRows, changedRows) => void\n     *\n     * Called when the set of visible rows changes. `visibleRows` maps\n     * { sectionID: { rowID: true }} for all the visible rows, and\n     * `changedRows` maps { sectionID: { rowID: true | false }} for the rows\n     * that have changed their visibility, with true indicating visible, and\n     * false indicating the view has moved out of view.\n     */\n    onChangeVisibleRows: PropTypes.func,\n    /**\n     * A performance optimization for improving scroll perf of\n     * large lists, used in conjunction with overflow: 'hidden' on the row\n     * containers. This is enabled by default.\n     */\n    removeClippedSubviews: PropTypes.bool,\n    /**\n     * Makes the sections headers sticky. The sticky behavior means that it\n     * will scroll with the content at the top of the section until it reaches\n     * the top of the screen, at which point it will stick to the top until it\n     * is pushed off the screen by the next section header. This property is\n     * not supported in conjunction with `horizontal={true}`. Only enabled by\n     * default on iOS because of typical platform standards.\n     */\n    stickySectionHeadersEnabled: PropTypes.bool,\n    /**\n     * An array of child indices determining which children get docked to the\n     * top of the screen when scrolling. For example, passing\n     * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n     * top of the scroll view. This property is not supported in conjunction\n     * with `horizontal={true}`.\n     */\n    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,\n    /**\n     * Flag indicating whether empty section headers should be rendered. In the future release\n     * empty section headers will be rendered by default, and the flag will be deprecated.\n     * If empty sections are not desired to be rendered their indices should be excluded from sectionID object.\n     */\n    enableEmptySections: PropTypes.bool\n  }),\n\n  /**\n   * Exports some data, e.g. for perf investigations or analytics.\n   */\n  getMetrics: function getMetrics() {\n    return {\n      contentLength: this.scrollProperties.contentLength,\n      totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),\n      renderedRows: this.state.curRenderedRowsCount,\n      visibleRows: Object.keys(this._visibleRows).length\n    };\n  },\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   * Note that `this._scrollComponent` might not be a `ScrollView`, so we\n   * need to check that it responds to `getScrollResponder` before calling it.\n   */\n  getScrollResponder: function getScrollResponder() {\n    if (this._scrollComponent && this._scrollComponent.getScrollResponder) {\n      return this._scrollComponent.getScrollResponder();\n    }\n  },\n\n  getScrollableNode: function getScrollableNode() {\n    if (this._scrollComponent && this._scrollComponent.getScrollableNode) {\n      return this._scrollComponent.getScrollableNode();\n    } else {\n      return findNodeHandle(this._scrollComponent);\n    }\n  },\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * See `ScrollView#scrollTo`.\n   */\n  scrollTo: function scrollTo() {\n    if (this._scrollComponent && this._scrollComponent.scrollTo) {\n      var _scrollComponent;\n\n      (_scrollComponent = this._scrollComponent).scrollTo.apply(_scrollComponent, arguments);\n    }\n  },\n\n  /**\n   * If this is a vertical ListView scrolls to the bottom.\n   * If this is a horizontal ListView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   *\n   * See `ScrollView#scrollToEnd`.\n   */\n  scrollToEnd: function scrollToEnd(options) {\n    if (this._scrollComponent) {\n      if (this._scrollComponent.scrollToEnd) {\n        this._scrollComponent.scrollToEnd(options);\n      } else {\n        console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');\n      }\n    }\n  },\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators: function flashScrollIndicators() {\n    if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {\n      this._scrollComponent.flashScrollIndicators();\n    }\n  },\n\n  setNativeProps: function setNativeProps(props) {\n    if (this._scrollComponent) {\n      this._scrollComponent.setNativeProps(props);\n    }\n  },\n\n  /**\n   * React life cycle hooks.\n   */\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      initialListSize: DEFAULT_INITIAL_ROWS,\n      pageSize: DEFAULT_PAGE_SIZE,\n      renderScrollComponent: function renderScrollComponent(props) {\n        return React.createElement(ScrollView, props);\n      },\n      scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,\n      onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,\n      stickySectionHeadersEnabled: Platform.OS === 'ios' || Platform.OS === 'web',\n      stickyHeaderIndices: []\n    };\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      curRenderedRowsCount: this.props.initialListSize,\n      highlightedRow: {}\n    };\n  },\n\n  getInnerViewNode: function getInnerViewNode() {\n    return this._scrollComponent.getInnerViewNode();\n  },\n\n  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {\n    // this data should never trigger a render pass, so don't put in state\n    this.scrollProperties = {\n      visibleLength: null,\n      contentLength: null,\n      offset: 0\n    };\n    this._childFrames = [];\n    this._visibleRows = {};\n    this._prevRenderedRowsCount = 0;\n    this._sentEndForContentLength = null;\n  },\n\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    // do this in animation frame until componentDidMount actually runs after\n    // the component is laid out\n    this.requestAnimationFrame(function () {\n      _this._measureAndUpdateScrollProps();\n    });\n  },\n\n  UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {\n      this.setState(function (state, props) {\n        _this2._prevRenderedRowsCount = 0;\n        return {\n          curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())\n        };\n      }, function () {\n        return _this2._renderMoreRowsIfNeeded();\n      });\n    }\n  },\n\n  componentDidUpdate: function componentDidUpdate() {\n    var _this3 = this;\n\n    this.requestAnimationFrame(function () {\n      _this3._measureAndUpdateScrollProps();\n    });\n  },\n\n  _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {\n    this.setState({ highlightedRow: { sectionID: sectionID, rowID: rowID } });\n  },\n\n  render: function render() {\n    var bodyComponents = [];\n\n    var dataSource = this.props.dataSource;\n    var allRowIDs = dataSource.rowIdentities;\n    var rowCount = 0;\n    var stickySectionHeaderIndices = [];\n\n    var renderSectionHeader = this.props.renderSectionHeader;\n\n\n    var header = this.props.renderHeader && this.props.renderHeader();\n    var footer = this.props.renderFooter && this.props.renderFooter();\n    var totalIndex = header ? 1 : 0;\n\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\n      var rowIDs = allRowIDs[sectionIdx];\n      if (rowIDs.length === 0) {\n        if (this.props.enableEmptySections === undefined) {\n          /* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses\n           * an error found when Flow v0.54 was deployed. To see the error\n           * delete this comment and run Flow. */\n          var warning = require('fbjs/lib/warning');\n          warning(false, 'In next release empty section headers will be rendered.' + \" In this release you can use 'enableEmptySections' flag to render empty section headers.\");\n          continue;\n        } else {\n          var invariant = require('fbjs/lib/invariant');\n          invariant(this.props.enableEmptySections, \"In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered.\" + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + \" In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.\");\n        }\n      }\n\n      if (renderSectionHeader) {\n        var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);\n        if (element) {\n          bodyComponents.push(React.cloneElement(element, { key: 's_' + sectionID }));\n          if (this.props.stickySectionHeadersEnabled) {\n            stickySectionHeaderIndices.push(totalIndex);\n          }\n          totalIndex++;\n        }\n      }\n\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        var rowID = rowIDs[rowIdx];\n        var comboID = sectionID + '_' + rowID;\n        var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);\n        var row = React.createElement(StaticRenderer, {\n          key: 'r_' + comboID,\n          shouldUpdate: !!shouldUpdateRow,\n          render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted)\n        });\n        bodyComponents.push(row);\n        totalIndex++;\n\n        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {\n          var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);\n          var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);\n          if (separator) {\n            bodyComponents.push(React.createElement(\n              View,\n              { key: 's_' + comboID },\n              separator\n            ));\n            totalIndex++;\n          }\n        }\n        if (++rowCount === this.state.curRenderedRowsCount) {\n          break;\n        }\n      }\n      if (rowCount >= this.state.curRenderedRowsCount) {\n        break;\n      }\n    }\n\n    var _props = this.props,\n        renderScrollComponent = _props.renderScrollComponent,\n        props = _objectWithoutProperties(_props, ['renderScrollComponent']);\n\n    if (!props.scrollEventThrottle) {\n      props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;\n    }\n    if (props.removeClippedSubviews === undefined) {\n      props.removeClippedSubviews = true;\n    }\n    Object.assign(props, {\n      onScroll: this._onScroll,\n      stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),\n\n      // Do not pass these events downstream to ScrollView since they will be\n      // registered in ListView's own ScrollResponder.Mixin\n      onKeyboardWillShow: undefined,\n      onKeyboardWillHide: undefined,\n      onKeyboardDidShow: undefined,\n      onKeyboardDidHide: undefined\n    });\n\n    return cloneReferencedElement(renderScrollComponent(props), {\n      ref: this._setScrollComponentRef,\n      onContentSizeChange: this._onContentSizeChange,\n      onLayout: this._onLayout,\n      DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined\n    }, header, bodyComponents, footer);\n  },\n\n  /**\n   * Private methods\n   */\n\n  _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {\n    var scrollComponent = this.getScrollResponder();\n    if (!scrollComponent || !scrollComponent.getInnerViewNode) {\n      return;\n    }\n\n    // RCTScrollViewManager.calculateChildFrames is not available on\n    // every platform\n    RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(findNodeHandle(scrollComponent), this._updateVisibleRows);\n  },\n\n  _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {\n    this._scrollComponent = scrollComponent;\n  },\n\n  _onContentSizeChange: function _onContentSizeChange(width, height) {\n    var contentLength = !this.props.horizontal ? height : width;\n    if (contentLength !== this.scrollProperties.contentLength) {\n      this.scrollProperties.contentLength = contentLength;\n      this._updateVisibleRows();\n      this._renderMoreRowsIfNeeded();\n    }\n    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);\n  },\n\n  _onLayout: function _onLayout(event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n        width = _event$nativeEvent$la.width,\n        height = _event$nativeEvent$la.height;\n\n    var visibleLength = !this.props.horizontal ? height : width;\n    if (visibleLength !== this.scrollProperties.visibleLength) {\n      this.scrollProperties.visibleLength = visibleLength;\n      this._updateVisibleRows();\n      this._renderMoreRowsIfNeeded();\n    }\n    this.props.onLayout && this.props.onLayout(event);\n  },\n\n  _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {\n    if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {\n      this._sentEndForContentLength = this.scrollProperties.contentLength;\n      this.props.onEndReached(event);\n      return true;\n    }\n    return false;\n  },\n\n  _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {\n    if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {\n      this._maybeCallOnEndReached();\n      return;\n    }\n\n    var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);\n    if (distanceFromEnd < this.props.scrollRenderAheadDistance) {\n      this._pageInNewRows();\n    }\n  },\n\n  _pageInNewRows: function _pageInNewRows() {\n    var _this4 = this;\n\n    this.setState(function (state, props) {\n      var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());\n      _this4._prevRenderedRowsCount = state.curRenderedRowsCount;\n      return {\n        curRenderedRowsCount: rowsToRender\n      };\n    }, function () {\n      _this4._measureAndUpdateScrollProps();\n      _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;\n    });\n  },\n\n  _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {\n    return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;\n  },\n\n  _updateVisibleRows: function _updateVisibleRows(updatedFrames) {\n    var _this5 = this;\n\n    if (!this.props.onChangeVisibleRows) {\n      return; // No need to compute visible rows if there is no callback\n    }\n    if (updatedFrames) {\n      updatedFrames.forEach(function (newFrame) {\n        _this5._childFrames[newFrame.index] = merge(newFrame);\n      });\n    }\n    var isVertical = !this.props.horizontal;\n    var dataSource = this.props.dataSource;\n    var visibleMin = this.scrollProperties.offset;\n    var visibleMax = visibleMin + this.scrollProperties.visibleLength;\n    var allRowIDs = dataSource.rowIdentities;\n\n    var header = this.props.renderHeader && this.props.renderHeader();\n    var totalIndex = header ? 1 : 0;\n    var visibilityChanged = false;\n    var changedRows = {};\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var rowIDs = allRowIDs[sectionIdx];\n      if (rowIDs.length === 0) {\n        continue;\n      }\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\n      if (this.props.renderSectionHeader) {\n        totalIndex++;\n      }\n      var visibleSection = this._visibleRows[sectionID];\n      if (!visibleSection) {\n        visibleSection = {};\n      }\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        var rowID = rowIDs[rowIdx];\n        var frame = this._childFrames[totalIndex];\n        totalIndex++;\n        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {\n          totalIndex++;\n        }\n        if (!frame) {\n          break;\n        }\n        var rowVisible = visibleSection[rowID];\n        var min = isVertical ? frame.y : frame.x;\n        var max = min + (isVertical ? frame.height : frame.width);\n        if (!min && !max || min === max) {\n          break;\n        }\n        if (min > visibleMax || max < visibleMin) {\n          if (rowVisible) {\n            visibilityChanged = true;\n            delete visibleSection[rowID];\n            if (!changedRows[sectionID]) {\n              changedRows[sectionID] = {};\n            }\n            changedRows[sectionID][rowID] = false;\n          }\n        } else if (!rowVisible) {\n          visibilityChanged = true;\n          visibleSection[rowID] = true;\n          if (!changedRows[sectionID]) {\n            changedRows[sectionID] = {};\n          }\n          changedRows[sectionID][rowID] = true;\n        }\n      }\n      if (!isEmpty(visibleSection)) {\n        this._visibleRows[sectionID] = visibleSection;\n      } else if (this._visibleRows[sectionID]) {\n        delete this._visibleRows[sectionID];\n      }\n    }\n    visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);\n  },\n\n  _onScroll: function _onScroll(e) {\n    var isVertical = !this.props.horizontal;\n    this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];\n    this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];\n    this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];\n    this._updateVisibleRows(e.nativeEvent.updatedChildFrames);\n    if (!this._maybeCallOnEndReached(e)) {\n      this._renderMoreRowsIfNeeded();\n    }\n\n    if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {\n      // Scrolled out of the end zone, so it should be able to trigger again.\n      this._sentEndForContentLength = null;\n    }\n\n    this.props.onScroll && this.props.onScroll(e);\n  }\n});\n\nexport default ListView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}